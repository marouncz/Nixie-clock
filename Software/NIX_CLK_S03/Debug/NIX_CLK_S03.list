
NIX_CLK_S03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080027b8  080027b8  000127b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080028a0  080028a0  000128a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080028a4  080028a4  000128a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000058  20000000  080028a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000464  20000058  08002900  00020058  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200004bc  08002900  000204bc  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
  9 .debug_info   000128af  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002df3  00000000  00000000  0003292f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000089c2  00000000  00000000  00035722  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000af8  00000000  00000000  0003e0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e18  00000000  00000000  0003ebe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007228  00000000  00000000  0003f9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003764  00000000  00000000  00046c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004a384  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ff0  00000000  00000000  0004a400  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000058 	.word	0x20000058
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080027a0 	.word	0x080027a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000005c 	.word	0x2000005c
 8000104:	080027a0 	.word	0x080027a0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000258:	b570      	push	{r4, r5, r6, lr}
 800025a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800025c:	20fa      	movs	r0, #250	; 0xfa
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <HAL_InitTick+0x3c>)
 8000260:	0080      	lsls	r0, r0, #2
 8000262:	7819      	ldrb	r1, [r3, #0]
 8000264:	f7ff ff6c 	bl	8000140 <__udivsi3>
 8000268:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <HAL_InitTick+0x40>)
 800026a:	0001      	movs	r1, r0
 800026c:	6818      	ldr	r0, [r3, #0]
 800026e:	f7ff ff67 	bl	8000140 <__udivsi3>
 8000272:	f000 f885 	bl	8000380 <HAL_SYSTICK_Config>
 8000276:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8000278:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800027a:	2c00      	cmp	r4, #0
 800027c:	d109      	bne.n	8000292 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027e:	2d03      	cmp	r5, #3
 8000280:	d807      	bhi.n	8000292 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	3802      	subs	r0, #2
 8000284:	0022      	movs	r2, r4
 8000286:	0029      	movs	r1, r5
 8000288:	f000 f83e 	bl	8000308 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800028c:	0020      	movs	r0, r4
 800028e:	4b03      	ldr	r3, [pc, #12]	; (800029c <HAL_InitTick+0x44>)
 8000290:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	20000000 	.word	0x20000000
 8000298:	20000054 	.word	0x20000054
 800029c:	20000004 	.word	0x20000004

080002a0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002a0:	2310      	movs	r3, #16
 80002a2:	4a06      	ldr	r2, [pc, #24]	; (80002bc <HAL_Init+0x1c>)
{
 80002a4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002a6:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80002a8:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002aa:	430b      	orrs	r3, r1
 80002ac:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ae:	f7ff ffd3 	bl	8000258 <HAL_InitTick>
  HAL_MspInit();
 80002b2:	f002 f905 	bl	80024c0 <HAL_MspInit>
}
 80002b6:	2000      	movs	r0, #0
 80002b8:	bd10      	pop	{r4, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	40022000 	.word	0x40022000

080002c0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <HAL_IncTick+0x10>)
 80002c2:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <HAL_IncTick+0x14>)
 80002c4:	6811      	ldr	r1, [r2, #0]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	185b      	adds	r3, r3, r1
 80002ca:	6013      	str	r3, [r2, #0]
}
 80002cc:	4770      	bx	lr
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	2000007c 	.word	0x2000007c
 80002d4:	20000000 	.word	0x20000000

080002d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002d8:	4b01      	ldr	r3, [pc, #4]	; (80002e0 <HAL_GetTick+0x8>)
 80002da:	6818      	ldr	r0, [r3, #0]
}
 80002dc:	4770      	bx	lr
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	2000007c 	.word	0x2000007c

080002e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002e8:	f7ff fff6 	bl	80002d8 <HAL_GetTick>
 80002ec:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002ee:	1c63      	adds	r3, r4, #1
 80002f0:	d002      	beq.n	80002f8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80002f2:	4b04      	ldr	r3, [pc, #16]	; (8000304 <HAL_Delay+0x20>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002f8:	f7ff ffee 	bl	80002d8 <HAL_GetTick>
 80002fc:	1b40      	subs	r0, r0, r5
 80002fe:	4284      	cmp	r4, r0
 8000300:	d8fa      	bhi.n	80002f8 <HAL_Delay+0x14>
  {
  }
}
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	20000000 	.word	0x20000000

08000308 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000308:	b570      	push	{r4, r5, r6, lr}
 800030a:	0189      	lsls	r1, r1, #6
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800030c:	2800      	cmp	r0, #0
 800030e:	db12      	blt.n	8000336 <HAL_NVIC_SetPriority+0x2e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	4a13      	ldr	r2, [pc, #76]	; (8000360 <HAL_NVIC_SetPriority+0x58>)
 8000314:	2403      	movs	r4, #3
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	189b      	adds	r3, r3, r2
 800031a:	22ff      	movs	r2, #255	; 0xff
 800031c:	4020      	ands	r0, r4
 800031e:	40a0      	lsls	r0, r4
 8000320:	0014      	movs	r4, r2
 8000322:	25c0      	movs	r5, #192	; 0xc0
 8000324:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000326:	4011      	ands	r1, r2
 8000328:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800032a:	00ad      	lsls	r5, r5, #2
 800032c:	595e      	ldr	r6, [r3, r5]
 800032e:	43a6      	bics	r6, r4
 8000330:	4331      	orrs	r1, r6
 8000332:	5159      	str	r1, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000334:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000336:	2403      	movs	r4, #3
 8000338:	230f      	movs	r3, #15
 800033a:	b2c0      	uxtb	r0, r0
 800033c:	4003      	ands	r3, r0
 800033e:	4020      	ands	r0, r4
 8000340:	40a0      	lsls	r0, r4
 8000342:	34fc      	adds	r4, #252	; 0xfc
 8000344:	0025      	movs	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000346:	4021      	ands	r1, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000348:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800034a:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800034c:	3b08      	subs	r3, #8
 800034e:	4a05      	ldr	r2, [pc, #20]	; (8000364 <HAL_NVIC_SetPriority+0x5c>)
 8000350:	089b      	lsrs	r3, r3, #2
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	189b      	adds	r3, r3, r2
 8000356:	69da      	ldr	r2, [r3, #28]
 8000358:	43aa      	bics	r2, r5
 800035a:	4311      	orrs	r1, r2
 800035c:	61d9      	str	r1, [r3, #28]
 800035e:	e7e9      	b.n	8000334 <HAL_NVIC_SetPriority+0x2c>
 8000360:	e000e100 	.word	0xe000e100
 8000364:	e000ed00 	.word	0xe000ed00

08000368 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000368:	2800      	cmp	r0, #0
 800036a:	db05      	blt.n	8000378 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800036c:	231f      	movs	r3, #31
 800036e:	4018      	ands	r0, r3
 8000370:	3b1e      	subs	r3, #30
 8000372:	4083      	lsls	r3, r0
 8000374:	4a01      	ldr	r2, [pc, #4]	; (800037c <HAL_NVIC_EnableIRQ+0x14>)
 8000376:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000378:	4770      	bx	lr
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	e000e100 	.word	0xe000e100

08000380 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000380:	4a09      	ldr	r2, [pc, #36]	; (80003a8 <HAL_SYSTICK_Config+0x28>)
 8000382:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000384:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000386:	4293      	cmp	r3, r2
 8000388:	d80d      	bhi.n	80003a6 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800038a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800038c:	4a07      	ldr	r2, [pc, #28]	; (80003ac <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800038e:	4808      	ldr	r0, [pc, #32]	; (80003b0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000390:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000392:	6a03      	ldr	r3, [r0, #32]
 8000394:	0609      	lsls	r1, r1, #24
 8000396:	021b      	lsls	r3, r3, #8
 8000398:	0a1b      	lsrs	r3, r3, #8
 800039a:	430b      	orrs	r3, r1
 800039c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800039e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003a0:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003a2:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003a4:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003a6:	4770      	bx	lr
 80003a8:	00ffffff 	.word	0x00ffffff
 80003ac:	e000e010 	.word	0xe000e010
 80003b0:	e000ed00 	.word	0xe000ed00

080003b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80003b4:	b570      	push	{r4, r5, r6, lr}
 80003b6:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 80003b8:	2001      	movs	r0, #1
  if(NULL == hdma)
 80003ba:	2c00      	cmp	r4, #0
 80003bc:	d024      	beq.n	8000408 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80003be:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80003c0:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80003c2:	1ca5      	adds	r5, r4, #2
 80003c4:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 80003c6:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80003c8:	4b10      	ldr	r3, [pc, #64]	; (800040c <HAL_DMA_Init+0x58>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80003ca:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80003cc:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80003ce:	6863      	ldr	r3, [r4, #4]
 80003d0:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80003d2:	68e1      	ldr	r1, [r4, #12]
 80003d4:	430b      	orrs	r3, r1
 80003d6:	6921      	ldr	r1, [r4, #16]
 80003d8:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80003da:	6961      	ldr	r1, [r4, #20]
 80003dc:	430b      	orrs	r3, r1
 80003de:	69a1      	ldr	r1, [r4, #24]
 80003e0:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80003e2:	69e1      	ldr	r1, [r4, #28]
 80003e4:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80003e6:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80003e8:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <HAL_DMA_Init+0x5c>)
 80003ec:	2114      	movs	r1, #20
 80003ee:	18c0      	adds	r0, r0, r3
 80003f0:	f7ff fea6 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80003f6:	0080      	lsls	r0, r0, #2
 80003f8:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80003fa:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80003fc:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80003fe:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000400:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000402:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8000404:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8000406:	77e0      	strb	r0, [r4, #31]
}  
 8000408:	bd70      	pop	{r4, r5, r6, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	ffffc00f 	.word	0xffffc00f
 8000410:	bffdfff8 	.word	0xbffdfff8
 8000414:	40020000 	.word	0x40020000

08000418 <HAL_DMA_Abort_IT>:
{  
 8000418:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800041a:	1c84      	adds	r4, r0, #2
 800041c:	7fe3      	ldrb	r3, [r4, #31]
 800041e:	2b02      	cmp	r3, #2
 8000420:	d004      	beq.n	800042c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000422:	2304      	movs	r3, #4
 8000424:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000426:	3b03      	subs	r3, #3
}
 8000428:	0018      	movs	r0, r3
 800042a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800042c:	210e      	movs	r1, #14
 800042e:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000430:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	438a      	bics	r2, r1
 8000436:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000438:	2201      	movs	r2, #1
 800043a:	6819      	ldr	r1, [r3, #0]
 800043c:	4391      	bics	r1, r2
 800043e:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000440:	0011      	movs	r1, r2
 8000442:	40a9      	lsls	r1, r5
 8000444:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000446:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000448:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 800044a:	2400      	movs	r4, #0
 800044c:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 800044e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000450:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8000452:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8000454:	42a2      	cmp	r2, r4
 8000456:	d0e7      	beq.n	8000428 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8000458:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800045a:	0023      	movs	r3, r4
 800045c:	e7e4      	b.n	8000428 <HAL_DMA_Abort_IT+0x10>

0800045e <HAL_DMA_IRQHandler>:
{
 800045e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000460:	2704      	movs	r7, #4
 8000462:	003e      	movs	r6, r7
 8000464:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000466:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000468:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800046a:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800046c:	6803      	ldr	r3, [r0, #0]
 800046e:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000470:	422e      	tst	r6, r5
 8000472:	d00d      	beq.n	8000490 <HAL_DMA_IRQHandler+0x32>
 8000474:	423c      	tst	r4, r7
 8000476:	d00b      	beq.n	8000490 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000478:	6819      	ldr	r1, [r3, #0]
 800047a:	0689      	lsls	r1, r1, #26
 800047c:	d402      	bmi.n	8000484 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800047e:	6819      	ldr	r1, [r3, #0]
 8000480:	43b9      	bics	r1, r7
 8000482:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000484:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000486:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000488:	2b00      	cmp	r3, #0
 800048a:	d019      	beq.n	80004c0 <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 800048c:	4798      	blx	r3
}  
 800048e:	e017      	b.n	80004c0 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000490:	2702      	movs	r7, #2
 8000492:	003e      	movs	r6, r7
 8000494:	408e      	lsls	r6, r1
 8000496:	422e      	tst	r6, r5
 8000498:	d013      	beq.n	80004c2 <HAL_DMA_IRQHandler+0x64>
 800049a:	423c      	tst	r4, r7
 800049c:	d011      	beq.n	80004c2 <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800049e:	6819      	ldr	r1, [r3, #0]
 80004a0:	0689      	lsls	r1, r1, #26
 80004a2:	d406      	bmi.n	80004b2 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80004a4:	240a      	movs	r4, #10
 80004a6:	6819      	ldr	r1, [r3, #0]
 80004a8:	43a1      	bics	r1, r4
 80004aa:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80004ac:	2101      	movs	r1, #1
 80004ae:	19c3      	adds	r3, r0, r7
 80004b0:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80004b2:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 80004b4:	2200      	movs	r2, #0
 80004b6:	1c43      	adds	r3, r0, #1
 80004b8:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 80004ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d1e5      	bne.n	800048c <HAL_DMA_IRQHandler+0x2e>
}  
 80004c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80004c2:	2608      	movs	r6, #8
 80004c4:	0037      	movs	r7, r6
 80004c6:	408f      	lsls	r7, r1
 80004c8:	423d      	tst	r5, r7
 80004ca:	d0f9      	beq.n	80004c0 <HAL_DMA_IRQHandler+0x62>
 80004cc:	4234      	tst	r4, r6
 80004ce:	d0f7      	beq.n	80004c0 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80004d0:	250e      	movs	r5, #14
 80004d2:	681c      	ldr	r4, [r3, #0]
 80004d4:	43ac      	bics	r4, r5
 80004d6:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80004d8:	2301      	movs	r3, #1
 80004da:	001c      	movs	r4, r3
 80004dc:	408c      	lsls	r4, r1
 80004de:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 80004e0:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80004e2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80004e4:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 80004e6:	2200      	movs	r2, #0
 80004e8:	18c3      	adds	r3, r0, r3
 80004ea:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 80004ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80004ee:	e7e5      	b.n	80004bc <HAL_DMA_IRQHandler+0x5e>

080004f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80004f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004f2:	680b      	ldr	r3, [r1, #0]
{ 
 80004f4:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004f6:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00u;
 80004f8:	2300      	movs	r3, #0
{ 
 80004fa:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004fc:	9a02      	ldr	r2, [sp, #8]
 80004fe:	40da      	lsrs	r2, r3
 8000500:	d101      	bne.n	8000506 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  } 
}
 8000502:	b007      	add	sp, #28
 8000504:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000506:	2201      	movs	r2, #1
 8000508:	409a      	lsls	r2, r3
 800050a:	9203      	str	r2, [sp, #12]
 800050c:	9903      	ldr	r1, [sp, #12]
 800050e:	9a02      	ldr	r2, [sp, #8]
 8000510:	400a      	ands	r2, r1
 8000512:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8000514:	d100      	bne.n	8000518 <HAL_GPIO_Init+0x28>
 8000516:	e08c      	b.n	8000632 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000518:	9a01      	ldr	r2, [sp, #4]
 800051a:	2110      	movs	r1, #16
 800051c:	6852      	ldr	r2, [r2, #4]
 800051e:	0016      	movs	r6, r2
 8000520:	438e      	bics	r6, r1
 8000522:	2e02      	cmp	r6, #2
 8000524:	d10e      	bne.n	8000544 <HAL_GPIO_Init+0x54>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000526:	2507      	movs	r5, #7
 8000528:	401d      	ands	r5, r3
 800052a:	00ad      	lsls	r5, r5, #2
 800052c:	3901      	subs	r1, #1
 800052e:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3u];
 8000530:	08dc      	lsrs	r4, r3, #3
 8000532:	00a4      	lsls	r4, r4, #2
 8000534:	1904      	adds	r4, r0, r4
 8000536:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000538:	438f      	bics	r7, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	6909      	ldr	r1, [r1, #16]
 800053e:	40a9      	lsls	r1, r5
 8000540:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 8000542:	6227      	str	r7, [r4, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000544:	2403      	movs	r4, #3
 8000546:	005f      	lsls	r7, r3, #1
 8000548:	40bc      	lsls	r4, r7
 800054a:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 800054c:	6805      	ldr	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800054e:	3e01      	subs	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000550:	4025      	ands	r5, r4
 8000552:	46ac      	mov	ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000554:	2503      	movs	r5, #3
 8000556:	4015      	ands	r5, r2
 8000558:	40bd      	lsls	r5, r7
 800055a:	4661      	mov	r1, ip
 800055c:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 800055e:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000560:	2e01      	cmp	r6, #1
 8000562:	d80f      	bhi.n	8000584 <HAL_GPIO_Init+0x94>
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000564:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR;
 8000566:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000568:	68cd      	ldr	r5, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800056a:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800056c:	40bd      	lsls	r5, r7
 800056e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000570:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000572:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000574:	9903      	ldr	r1, [sp, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000576:	0915      	lsrs	r5, r2, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000578:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800057a:	2101      	movs	r1, #1
 800057c:	400d      	ands	r5, r1
 800057e:	409d      	lsls	r5, r3
 8000580:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000582:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000584:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000586:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000588:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800058a:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800058c:	2180      	movs	r1, #128	; 0x80
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800058e:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000590:	0549      	lsls	r1, r1, #21
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000592:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000594:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000596:	420a      	tst	r2, r1
 8000598:	d04b      	beq.n	8000632 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800059a:	2101      	movs	r1, #1
 800059c:	4c26      	ldr	r4, [pc, #152]	; (8000638 <HAL_GPIO_Init+0x148>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800059e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a0:	69a5      	ldr	r5, [r4, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005a2:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a4:	430d      	orrs	r5, r1
 80005a6:	61a5      	str	r5, [r4, #24]
 80005a8:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 80005aa:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ac:	400c      	ands	r4, r1
 80005ae:	9405      	str	r4, [sp, #20]
 80005b0:	9c05      	ldr	r4, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005b2:	240f      	movs	r4, #15
 80005b4:	4921      	ldr	r1, [pc, #132]	; (800063c <HAL_GPIO_Init+0x14c>)
 80005b6:	00ad      	lsls	r5, r5, #2
 80005b8:	00b6      	lsls	r6, r6, #2
 80005ba:	186d      	adds	r5, r5, r1
 80005bc:	40b4      	lsls	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80005be:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2u];
 80005c0:	68af      	ldr	r7, [r5, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80005c2:	05c9      	lsls	r1, r1, #23
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80005c4:	43a7      	bics	r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80005c6:	2400      	movs	r4, #0
 80005c8:	4288      	cmp	r0, r1
 80005ca:	d00c      	beq.n	80005e6 <HAL_GPIO_Init+0xf6>
 80005cc:	491c      	ldr	r1, [pc, #112]	; (8000640 <HAL_GPIO_Init+0x150>)
 80005ce:	3401      	adds	r4, #1
 80005d0:	4288      	cmp	r0, r1
 80005d2:	d008      	beq.n	80005e6 <HAL_GPIO_Init+0xf6>
 80005d4:	491b      	ldr	r1, [pc, #108]	; (8000644 <HAL_GPIO_Init+0x154>)
 80005d6:	3401      	adds	r4, #1
 80005d8:	4288      	cmp	r0, r1
 80005da:	d004      	beq.n	80005e6 <HAL_GPIO_Init+0xf6>
 80005dc:	491a      	ldr	r1, [pc, #104]	; (8000648 <HAL_GPIO_Init+0x158>)
 80005de:	3403      	adds	r4, #3
 80005e0:	4288      	cmp	r0, r1
 80005e2:	d100      	bne.n	80005e6 <HAL_GPIO_Init+0xf6>
 80005e4:	3c02      	subs	r4, #2
 80005e6:	40b4      	lsls	r4, r6
        temp &= ~(iocurrent);
 80005e8:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80005ea:	433c      	orrs	r4, r7
          temp |= iocurrent;
 80005ec:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 80005ee:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80005f0:	4c16      	ldr	r4, [pc, #88]	; (800064c <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 80005f2:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80005f4:	6827      	ldr	r7, [r4, #0]
          temp |= iocurrent;
 80005f6:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005f8:	03d1      	lsls	r1, r2, #15
 80005fa:	d401      	bmi.n	8000600 <HAL_GPIO_Init+0x110>
        temp &= ~(iocurrent);
 80005fc:	003e      	movs	r6, r7
 80005fe:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000600:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000602:	6867      	ldr	r7, [r4, #4]
          temp |= iocurrent;
 8000604:	9e00      	ldr	r6, [sp, #0]
 8000606:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000608:	0391      	lsls	r1, r2, #14
 800060a:	d401      	bmi.n	8000610 <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 800060c:	003e      	movs	r6, r7
 800060e:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000610:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000612:	68a7      	ldr	r7, [r4, #8]
          temp |= iocurrent;
 8000614:	9e00      	ldr	r6, [sp, #0]
 8000616:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000618:	02d1      	lsls	r1, r2, #11
 800061a:	d401      	bmi.n	8000620 <HAL_GPIO_Init+0x130>
        temp &= ~(iocurrent);
 800061c:	003e      	movs	r6, r7
 800061e:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000620:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000622:	68e6      	ldr	r6, [r4, #12]
          temp |= iocurrent;
 8000624:	9f00      	ldr	r7, [sp, #0]
 8000626:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000628:	0292      	lsls	r2, r2, #10
 800062a:	d401      	bmi.n	8000630 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 800062c:	402e      	ands	r6, r5
 800062e:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000630:	60e7      	str	r7, [r4, #12]
    position++;
 8000632:	3301      	adds	r3, #1
 8000634:	e762      	b.n	80004fc <HAL_GPIO_Init+0xc>
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	40021000 	.word	0x40021000
 800063c:	40010000 	.word	0x40010000
 8000640:	48000400 	.word	0x48000400
 8000644:	48000800 	.word	0x48000800
 8000648:	48000c00 	.word	0x48000c00
 800064c:	40010400 	.word	0x40010400

08000650 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000650:	2a00      	cmp	r2, #0
 8000652:	d001      	beq.n	8000658 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000654:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000656:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000658:	6281      	str	r1, [r0, #40]	; 0x28
}
 800065a:	e7fc      	b.n	8000656 <HAL_GPIO_WritePin+0x6>

0800065c <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 800065c:	4770      	bx	lr
	...

08000660 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8000662:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000664:	695a      	ldr	r2, [r3, #20]
 8000666:	4210      	tst	r0, r2
 8000668:	d002      	beq.n	8000670 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800066a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800066c:	f7ff fff6 	bl	800065c <HAL_GPIO_EXTI_Callback>
}
 8000670:	bd10      	pop	{r4, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40010400 	.word	0x40010400

08000678 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000678:	6803      	ldr	r3, [r0, #0]
 800067a:	699a      	ldr	r2, [r3, #24]
 800067c:	0792      	lsls	r2, r2, #30
 800067e:	d501      	bpl.n	8000684 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000680:	2200      	movs	r2, #0
 8000682:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000684:	2201      	movs	r2, #1
 8000686:	6999      	ldr	r1, [r3, #24]
 8000688:	4211      	tst	r1, r2
 800068a:	d102      	bne.n	8000692 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800068c:	6999      	ldr	r1, [r3, #24]
 800068e:	430a      	orrs	r2, r1
 8000690:	619a      	str	r2, [r3, #24]
  }
}
 8000692:	4770      	bx	lr

08000694 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000694:	b570      	push	{r4, r5, r6, lr}
 8000696:	9e04      	ldr	r6, [sp, #16]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000698:	0589      	lsls	r1, r1, #22
 800069a:	4333      	orrs	r3, r6
 800069c:	0d89      	lsrs	r1, r1, #22
 800069e:	4319      	orrs	r1, r3
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	6804      	ldr	r4, [r0, #0]
 80006a4:	00db      	lsls	r3, r3, #3
 80006a6:	0d70      	lsrs	r0, r6, #21
 80006a8:	4018      	ands	r0, r3
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <I2C_TransferConfig+0x28>)
 80006ac:	6865      	ldr	r5, [r4, #4]
 80006ae:	0412      	lsls	r2, r2, #16
 80006b0:	4318      	orrs	r0, r3
 80006b2:	4385      	bics	r5, r0
 80006b4:	4311      	orrs	r1, r2
 80006b6:	4329      	orrs	r1, r5
 80006b8:	6061      	str	r1, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	03ff63ff 	.word	0x03ff63ff

080006c0 <I2C_WaitOnFlagUntilTimeout>:
{
 80006c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c2:	0004      	movs	r4, r0
 80006c4:	000e      	movs	r6, r1
 80006c6:	0017      	movs	r7, r2
 80006c8:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80006ca:	6822      	ldr	r2, [r4, #0]
 80006cc:	6993      	ldr	r3, [r2, #24]
 80006ce:	4033      	ands	r3, r6
 80006d0:	1b9b      	subs	r3, r3, r6
 80006d2:	4259      	negs	r1, r3
 80006d4:	414b      	adcs	r3, r1
 80006d6:	42bb      	cmp	r3, r7
 80006d8:	d001      	beq.n	80006de <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80006da:	2000      	movs	r0, #0
 80006dc:	e017      	b.n	800070e <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80006de:	1c6b      	adds	r3, r5, #1
 80006e0:	d0f4      	beq.n	80006cc <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80006e2:	f7ff fdf9 	bl	80002d8 <HAL_GetTick>
 80006e6:	9b06      	ldr	r3, [sp, #24]
 80006e8:	1ac0      	subs	r0, r0, r3
 80006ea:	4285      	cmp	r5, r0
 80006ec:	d301      	bcc.n	80006f2 <I2C_WaitOnFlagUntilTimeout+0x32>
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d1eb      	bne.n	80006ca <I2C_WaitOnFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006f2:	2220      	movs	r2, #32
 80006f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80006f6:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006f8:	4313      	orrs	r3, r2
 80006fa:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80006fc:	0023      	movs	r3, r4
 80006fe:	3341      	adds	r3, #65	; 0x41
 8000700:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000702:	0022      	movs	r2, r4
 8000704:	2300      	movs	r3, #0
 8000706:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000708:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800070a:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800070c:	7023      	strb	r3, [r4, #0]
}
 800070e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000710 <I2C_IsAcknowledgeFailed>:
{
 8000710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000712:	6803      	ldr	r3, [r0, #0]
{
 8000714:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000716:	6998      	ldr	r0, [r3, #24]
 8000718:	2310      	movs	r3, #16
{
 800071a:	000e      	movs	r6, r1
 800071c:	0017      	movs	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800071e:	4018      	ands	r0, r3
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000720:	2520      	movs	r5, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000722:	2800      	cmp	r0, #0
 8000724:	d118      	bne.n	8000758 <I2C_IsAcknowledgeFailed+0x48>
}
 8000726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 8000728:	1c72      	adds	r2, r6, #1
 800072a:	d016      	beq.n	800075a <I2C_IsAcknowledgeFailed+0x4a>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800072c:	f7ff fdd4 	bl	80002d8 <HAL_GetTick>
 8000730:	1bc0      	subs	r0, r0, r7
 8000732:	4286      	cmp	r6, r0
 8000734:	d301      	bcc.n	800073a <I2C_IsAcknowledgeFailed+0x2a>
 8000736:	2e00      	cmp	r6, #0
 8000738:	d10e      	bne.n	8000758 <I2C_IsAcknowledgeFailed+0x48>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800073a:	2220      	movs	r2, #32
 800073c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800073e:	4313      	orrs	r3, r2
 8000740:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000742:	0023      	movs	r3, r4
 8000744:	3341      	adds	r3, #65	; 0x41
 8000746:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000748:	0022      	movs	r2, r4
 800074a:	2300      	movs	r3, #0
 800074c:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800074e:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000750:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 8000752:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 8000754:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8000756:	e7e6      	b.n	8000726 <I2C_IsAcknowledgeFailed+0x16>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000758:	6823      	ldr	r3, [r4, #0]
 800075a:	699a      	ldr	r2, [r3, #24]
 800075c:	422a      	tst	r2, r5
 800075e:	d0e3      	beq.n	8000728 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000760:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8000762:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000764:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000766:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8000768:	f7ff ff86 	bl	8000678 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800076c:	6822      	ldr	r2, [r4, #0]
 800076e:	4906      	ldr	r1, [pc, #24]	; (8000788 <I2C_IsAcknowledgeFailed+0x78>)
 8000770:	6853      	ldr	r3, [r2, #4]
 8000772:	400b      	ands	r3, r1
 8000774:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8000776:	2304      	movs	r3, #4
 8000778:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800077a:	4313      	orrs	r3, r2
 800077c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800077e:	0023      	movs	r3, r4
 8000780:	3341      	adds	r3, #65	; 0x41
 8000782:	701d      	strb	r5, [r3, #0]
 8000784:	e7e0      	b.n	8000748 <I2C_IsAcknowledgeFailed+0x38>
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	fe00e800 	.word	0xfe00e800

0800078c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800078c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800078e:	0004      	movs	r4, r0
 8000790:	000d      	movs	r5, r1
 8000792:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000794:	2702      	movs	r7, #2
 8000796:	6823      	ldr	r3, [r4, #0]
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	423b      	tst	r3, r7
 800079c:	d001      	beq.n	80007a2 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800079e:	2000      	movs	r0, #0
}
 80007a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80007a2:	0032      	movs	r2, r6
 80007a4:	0029      	movs	r1, r5
 80007a6:	0020      	movs	r0, r4
 80007a8:	f7ff ffb2 	bl	8000710 <I2C_IsAcknowledgeFailed>
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d115      	bne.n	80007dc <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80007b0:	1c6b      	adds	r3, r5, #1
 80007b2:	d0f0      	beq.n	8000796 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80007b4:	f7ff fd90 	bl	80002d8 <HAL_GetTick>
 80007b8:	1b80      	subs	r0, r0, r6
 80007ba:	4285      	cmp	r5, r0
 80007bc:	d301      	bcc.n	80007c2 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 80007be:	2d00      	cmp	r5, #0
 80007c0:	d1e9      	bne.n	8000796 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80007c2:	2220      	movs	r2, #32
 80007c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007c6:	4313      	orrs	r3, r2
 80007c8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80007ca:	0023      	movs	r3, r4
 80007cc:	3341      	adds	r3, #65	; 0x41
 80007ce:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80007d0:	0022      	movs	r2, r4
 80007d2:	2300      	movs	r3, #0
 80007d4:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 80007d6:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80007d8:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 80007da:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80007dc:	2001      	movs	r0, #1
 80007de:	e7df      	b.n	80007a0 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080007e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80007e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007e2:	0004      	movs	r4, r0
 80007e4:	000d      	movs	r5, r1
 80007e6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80007e8:	2720      	movs	r7, #32
 80007ea:	6823      	ldr	r3, [r4, #0]
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	423b      	tst	r3, r7
 80007f0:	d001      	beq.n	80007f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80007f2:	2000      	movs	r0, #0
}
 80007f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80007f6:	0032      	movs	r2, r6
 80007f8:	0029      	movs	r1, r5
 80007fa:	0020      	movs	r0, r4
 80007fc:	f7ff ff88 	bl	8000710 <I2C_IsAcknowledgeFailed>
 8000800:	2800      	cmp	r0, #0
 8000802:	d113      	bne.n	800082c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000804:	f7ff fd68 	bl	80002d8 <HAL_GetTick>
 8000808:	1b80      	subs	r0, r0, r6
 800080a:	4285      	cmp	r5, r0
 800080c:	d301      	bcc.n	8000812 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800080e:	2d00      	cmp	r5, #0
 8000810:	d1eb      	bne.n	80007ea <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000812:	2220      	movs	r2, #32
 8000814:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000816:	4313      	orrs	r3, r2
 8000818:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800081a:	0023      	movs	r3, r4
 800081c:	3341      	adds	r3, #65	; 0x41
 800081e:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000820:	0022      	movs	r2, r4
 8000822:	2300      	movs	r3, #0
 8000824:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 8000826:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000828:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800082a:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800082c:	2001      	movs	r0, #1
 800082e:	e7e1      	b.n	80007f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08000830 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000832:	0004      	movs	r4, r0
 8000834:	000d      	movs	r5, r1
 8000836:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000838:	2604      	movs	r6, #4
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4233      	tst	r3, r6
 8000840:	d111      	bne.n	8000866 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000842:	003a      	movs	r2, r7
 8000844:	0029      	movs	r1, r5
 8000846:	0020      	movs	r0, r4
 8000848:	f7ff ff62 	bl	8000710 <I2C_IsAcknowledgeFailed>
 800084c:	2800      	cmp	r0, #0
 800084e:	d11a      	bne.n	8000886 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000850:	2120      	movs	r1, #32
 8000852:	6823      	ldr	r3, [r4, #0]
 8000854:	699a      	ldr	r2, [r3, #24]
 8000856:	420a      	tst	r2, r1
 8000858:	d017      	beq.n	800088a <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800085a:	699a      	ldr	r2, [r3, #24]
 800085c:	4232      	tst	r2, r6
 800085e:	d004      	beq.n	800086a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8000860:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000862:	2a00      	cmp	r2, #0
 8000864:	d001      	beq.n	800086a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 8000866:	2000      	movs	r0, #0
}
 8000868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800086a:	2120      	movs	r1, #32
 800086c:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800086e:	685a      	ldr	r2, [r3, #4]
 8000870:	480e      	ldr	r0, [pc, #56]	; (80008ac <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 8000872:	4002      	ands	r2, r0
 8000874:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8000876:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000878:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800087a:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800087c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800087e:	7011      	strb	r1, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8000880:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000882:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 8000884:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8000886:	2001      	movs	r0, #1
 8000888:	e7ee      	b.n	8000868 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800088a:	f7ff fd25 	bl	80002d8 <HAL_GetTick>
 800088e:	1bc0      	subs	r0, r0, r7
 8000890:	4285      	cmp	r5, r0
 8000892:	d301      	bcc.n	8000898 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8000894:	2d00      	cmp	r5, #0
 8000896:	d1d0      	bne.n	800083a <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000898:	2220      	movs	r2, #32
 800089a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800089c:	4313      	orrs	r3, r2
 800089e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80008a0:	0023      	movs	r3, r4
 80008a2:	3341      	adds	r3, #65	; 0x41
 80008a4:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 80008a6:	3440      	adds	r4, #64	; 0x40
 80008a8:	2300      	movs	r3, #0
 80008aa:	e7eb      	b.n	8000884 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80008ac:	fe00e800 	.word	0xfe00e800

080008b0 <HAL_I2C_Init>:
{
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80008b4:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80008b6:	2c00      	cmp	r4, #0
 80008b8:	d03f      	beq.n	800093a <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80008ba:	0025      	movs	r5, r4
 80008bc:	3541      	adds	r5, #65	; 0x41
 80008be:	782b      	ldrb	r3, [r5, #0]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d105      	bne.n	80008d2 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80008c6:	0022      	movs	r2, r4
 80008c8:	3240      	adds	r2, #64	; 0x40
 80008ca:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 80008cc:	0020      	movs	r0, r4
 80008ce:	f001 fcbb 	bl	8002248 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80008d2:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80008d4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80008d6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80008d8:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80008da:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	68a6      	ldr	r6, [r4, #8]
 80008e0:	438a      	bics	r2, r1
 80008e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80008e4:	6861      	ldr	r1, [r4, #4]
 80008e6:	4a1a      	ldr	r2, [pc, #104]	; (8000950 <HAL_I2C_Init+0xa0>)
 80008e8:	400a      	ands	r2, r1
 80008ea:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80008ec:	6899      	ldr	r1, [r3, #8]
 80008ee:	4a19      	ldr	r2, [pc, #100]	; (8000954 <HAL_I2C_Init+0xa4>)
 80008f0:	4011      	ands	r1, r2
 80008f2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80008f4:	2801      	cmp	r0, #1
 80008f6:	d121      	bne.n	800093c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	0209      	lsls	r1, r1, #8
 80008fc:	4331      	orrs	r1, r6
 80008fe:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000900:	6858      	ldr	r0, [r3, #4]
 8000902:	4915      	ldr	r1, [pc, #84]	; (8000958 <HAL_I2C_Init+0xa8>)
 8000904:	4301      	orrs	r1, r0
 8000906:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000908:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800090a:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800090c:	400a      	ands	r2, r1
 800090e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000910:	6961      	ldr	r1, [r4, #20]
 8000912:	6922      	ldr	r2, [r4, #16]
 8000914:	430a      	orrs	r2, r1
 8000916:	69a1      	ldr	r1, [r4, #24]
 8000918:	0209      	lsls	r1, r1, #8
 800091a:	430a      	orrs	r2, r1
 800091c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800091e:	6a21      	ldr	r1, [r4, #32]
 8000920:	69e2      	ldr	r2, [r4, #28]
 8000922:	430a      	orrs	r2, r1
 8000924:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000926:	2201      	movs	r2, #1
 8000928:	6819      	ldr	r1, [r3, #0]
 800092a:	430a      	orrs	r2, r1
 800092c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800092e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000930:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000932:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000934:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000936:	3442      	adds	r4, #66	; 0x42
 8000938:	7020      	strb	r0, [r4, #0]
}
 800093a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800093c:	2184      	movs	r1, #132	; 0x84
 800093e:	0209      	lsls	r1, r1, #8
 8000940:	4331      	orrs	r1, r6
 8000942:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000944:	2802      	cmp	r0, #2
 8000946:	d1db      	bne.n	8000900 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	0109      	lsls	r1, r1, #4
 800094c:	6059      	str	r1, [r3, #4]
 800094e:	e7d7      	b.n	8000900 <HAL_I2C_Init+0x50>
 8000950:	f0ffffff 	.word	0xf0ffffff
 8000954:	ffff7fff 	.word	0xffff7fff
 8000958:	02008000 	.word	0x02008000

0800095c <HAL_I2C_Master_Transmit>:
{
 800095c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800095e:	0005      	movs	r5, r0
{
 8000960:	b087      	sub	sp, #28
 8000962:	9103      	str	r1, [sp, #12]
 8000964:	9204      	str	r2, [sp, #16]
 8000966:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000968:	3541      	adds	r5, #65	; 0x41
 800096a:	782b      	ldrb	r3, [r5, #0]
{
 800096c:	0004      	movs	r4, r0
    return HAL_BUSY;
 800096e:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000970:	2b20      	cmp	r3, #32
 8000972:	d114      	bne.n	800099e <HAL_I2C_Master_Transmit+0x42>
    __HAL_LOCK(hi2c);
 8000974:	0023      	movs	r3, r4
 8000976:	3340      	adds	r3, #64	; 0x40
 8000978:	781a      	ldrb	r2, [r3, #0]
 800097a:	2a01      	cmp	r2, #1
 800097c:	d00f      	beq.n	800099e <HAL_I2C_Master_Transmit+0x42>
 800097e:	2601      	movs	r6, #1
 8000980:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8000982:	f7ff fca9 	bl	80002d8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000986:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000988:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800098a:	9000      	str	r0, [sp, #0]
 800098c:	2319      	movs	r3, #25
 800098e:	0032      	movs	r2, r6
 8000990:	0209      	lsls	r1, r1, #8
 8000992:	0020      	movs	r0, r4
 8000994:	f7ff fe94 	bl	80006c0 <I2C_WaitOnFlagUntilTimeout>
 8000998:	2800      	cmp	r0, #0
 800099a:	d002      	beq.n	80009a2 <HAL_I2C_Master_Transmit+0x46>
      return HAL_ERROR;
 800099c:	2001      	movs	r0, #1
}
 800099e:	b007      	add	sp, #28
 80009a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80009a2:	2321      	movs	r3, #33	; 0x21
 80009a4:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80009a6:	0025      	movs	r5, r4
 80009a8:	3b11      	subs	r3, #17
 80009aa:	3542      	adds	r5, #66	; 0x42
 80009ac:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 80009ae:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009b0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80009b2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80009b4:	466b      	mov	r3, sp
 80009b6:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 80009b8:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80009ba:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80009bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80009be:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <HAL_I2C_Master_Transmit+0x124>)
 80009c0:	2aff      	cmp	r2, #255	; 0xff
 80009c2:	d921      	bls.n	8000a08 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80009c4:	22ff      	movs	r2, #255	; 0xff
 80009c6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2380      	movs	r3, #128	; 0x80
 80009cc:	045b      	lsls	r3, r3, #17
 80009ce:	9903      	ldr	r1, [sp, #12]
 80009d0:	0020      	movs	r0, r4
 80009d2:	f7ff fe5f 	bl	8000694 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80009d6:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 80009d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009da:	003a      	movs	r2, r7
 80009dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80009de:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d119      	bne.n	8000a18 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009e4:	f7ff fefc 	bl	80007e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80009e8:	2800      	cmp	r0, #0
 80009ea:	d1d7      	bne.n	800099c <HAL_I2C_Master_Transmit+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80009ec:	2120      	movs	r1, #32
 80009ee:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80009f0:	4e24      	ldr	r6, [pc, #144]	; (8000a84 <HAL_I2C_Master_Transmit+0x128>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80009f2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80009f4:	685a      	ldr	r2, [r3, #4]
 80009f6:	4032      	ands	r2, r6
 80009f8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80009fa:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80009fc:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80009fe:	3341      	adds	r3, #65	; 0x41
 8000a00:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000a02:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000a04:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000a06:	e7ca      	b.n	800099e <HAL_I2C_Master_Transmit+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8000a08:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000a0a:	b292      	uxth	r2, r2
 8000a0c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	049b      	lsls	r3, r3, #18
 8000a16:	e7da      	b.n	80009ce <HAL_I2C_Master_Transmit+0x72>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a18:	f7ff feb8 	bl	800078c <I2C_WaitOnTXISFlagUntilTimeout>
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	d1bd      	bne.n	800099c <HAL_I2C_Master_Transmit+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a22:	6822      	ldr	r2, [r4, #0]
 8000a24:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8000a26:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000a28:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000a2a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000a2c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000a2e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8000a30:	3b01      	subs	r3, #1
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000a36:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000a38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000a3a:	b292      	uxth	r2, r2
 8000a3c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0ca      	beq.n	80009d8 <HAL_I2C_Master_Transmit+0x7c>
 8000a42:	2a00      	cmp	r2, #0
 8000a44:	d1c8      	bne.n	80009d8 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000a46:	9700      	str	r7, [sp, #0]
 8000a48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000a4a:	2180      	movs	r1, #128	; 0x80
 8000a4c:	0020      	movs	r0, r4
 8000a4e:	f7ff fe37 	bl	80006c0 <I2C_WaitOnFlagUntilTimeout>
 8000a52:	2800      	cmp	r0, #0
 8000a54:	d1a2      	bne.n	800099c <HAL_I2C_Master_Transmit+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000a58:	2bff      	cmp	r3, #255	; 0xff
 8000a5a:	d909      	bls.n	8000a70 <HAL_I2C_Master_Transmit+0x114>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a60:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000a62:	045b      	lsls	r3, r3, #17
 8000a64:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a66:	9903      	ldr	r1, [sp, #12]
 8000a68:	0020      	movs	r0, r4
 8000a6a:	f7ff fe13 	bl	8000694 <I2C_TransferConfig>
 8000a6e:	e7b3      	b.n	80009d8 <HAL_I2C_Master_Transmit+0x7c>
 8000a70:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8000a72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a74:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8000a76:	b292      	uxth	r2, r2
 8000a78:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	9000      	str	r0, [sp, #0]
 8000a7e:	e7f2      	b.n	8000a66 <HAL_I2C_Master_Transmit+0x10a>
 8000a80:	80002000 	.word	0x80002000
 8000a84:	fe00e800 	.word	0xfe00e800

08000a88 <HAL_I2C_Master_Receive>:
{
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a8a:	0005      	movs	r5, r0
{
 8000a8c:	b087      	sub	sp, #28
 8000a8e:	9103      	str	r1, [sp, #12]
 8000a90:	9204      	str	r2, [sp, #16]
 8000a92:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a94:	3541      	adds	r5, #65	; 0x41
 8000a96:	782b      	ldrb	r3, [r5, #0]
{
 8000a98:	0004      	movs	r4, r0
    return HAL_BUSY;
 8000a9a:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a9c:	2b20      	cmp	r3, #32
 8000a9e:	d114      	bne.n	8000aca <HAL_I2C_Master_Receive+0x42>
    __HAL_LOCK(hi2c);
 8000aa0:	0023      	movs	r3, r4
 8000aa2:	3340      	adds	r3, #64	; 0x40
 8000aa4:	781a      	ldrb	r2, [r3, #0]
 8000aa6:	2a01      	cmp	r2, #1
 8000aa8:	d00f      	beq.n	8000aca <HAL_I2C_Master_Receive+0x42>
 8000aaa:	2601      	movs	r6, #1
 8000aac:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8000aae:	f7ff fc13 	bl	80002d8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ab2:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8000ab4:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000ab6:	9000      	str	r0, [sp, #0]
 8000ab8:	2319      	movs	r3, #25
 8000aba:	0032      	movs	r2, r6
 8000abc:	0209      	lsls	r1, r1, #8
 8000abe:	0020      	movs	r0, r4
 8000ac0:	f7ff fdfe 	bl	80006c0 <I2C_WaitOnFlagUntilTimeout>
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d002      	beq.n	8000ace <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8000ac8:	2001      	movs	r0, #1
}
 8000aca:	b007      	add	sp, #28
 8000acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000ace:	2322      	movs	r3, #34	; 0x22
 8000ad0:	702b      	strb	r3, [r5, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ad2:	0025      	movs	r5, r4
 8000ad4:	3b12      	subs	r3, #18
 8000ad6:	3542      	adds	r5, #66	; 0x42
 8000ad8:	702b      	strb	r3, [r5, #0]
    hi2c->pBuffPtr  = pData;
 8000ada:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000adc:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8000ade:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8000ae0:	466b      	mov	r3, sp
 8000ae2:	8a9b      	ldrh	r3, [r3, #20]
    hi2c->XferISR   = NULL;
 8000ae4:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8000ae6:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ae8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000aea:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <HAL_I2C_Master_Receive+0x128>)
 8000aec:	2aff      	cmp	r2, #255	; 0xff
 8000aee:	d921      	bls.n	8000b34 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000af0:	22ff      	movs	r2, #255	; 0xff
 8000af2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2380      	movs	r3, #128	; 0x80
 8000af8:	045b      	lsls	r3, r3, #17
 8000afa:	9903      	ldr	r1, [sp, #12]
 8000afc:	0020      	movs	r0, r4
 8000afe:	f7ff fdc9 	bl	8000694 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b02:	26ff      	movs	r6, #255	; 0xff
    while (hi2c->XferCount > 0U)
 8000b04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b06:	003a      	movs	r2, r7
 8000b08:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000b0a:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d119      	bne.n	8000b44 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b10:	f7ff fe66 	bl	80007e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000b14:	2800      	cmp	r0, #0
 8000b16:	d1d7      	bne.n	8000ac8 <HAL_I2C_Master_Receive+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b18:	2120      	movs	r1, #32
 8000b1a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8000b1c:	4e25      	ldr	r6, [pc, #148]	; (8000bb4 <HAL_I2C_Master_Receive+0x12c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b1e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	4032      	ands	r2, r6
 8000b24:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8000b26:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8000b28:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8000b2a:	3341      	adds	r3, #65	; 0x41
 8000b2c:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000b2e:	7028      	strb	r0, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000b30:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8000b32:	e7ca      	b.n	8000aca <HAL_I2C_Master_Receive+0x42>
      hi2c->XferSize = hi2c->XferCount;
 8000b34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000b36:	b292      	uxth	r2, r2
 8000b38:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	049b      	lsls	r3, r3, #18
 8000b42:	e7da      	b.n	8000afa <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b44:	f7ff fe74 	bl	8000830 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	d1bd      	bne.n	8000ac8 <HAL_I2C_Master_Receive+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8000b4c:	6823      	ldr	r3, [r4, #0]
 8000b4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b52:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8000b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8000b56:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8000b58:	3301      	adds	r3, #1
 8000b5a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000b5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000b5e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8000b60:	3b01      	subs	r3, #1
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000b66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000b68:	b292      	uxth	r2, r2
 8000b6a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d0c9      	beq.n	8000b04 <HAL_I2C_Master_Receive+0x7c>
 8000b70:	2a00      	cmp	r2, #0
 8000b72:	d1c7      	bne.n	8000b04 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000b74:	9700      	str	r7, [sp, #0]
 8000b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	0020      	movs	r0, r4
 8000b7c:	f7ff fda0 	bl	80006c0 <I2C_WaitOnFlagUntilTimeout>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d1a1      	bne.n	8000ac8 <HAL_I2C_Master_Receive+0x40>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000b86:	2bff      	cmp	r3, #255	; 0xff
 8000b88:	d909      	bls.n	8000b9e <HAL_I2C_Master_Receive+0x116>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b8e:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000b90:	045b      	lsls	r3, r3, #17
 8000b92:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000b94:	9903      	ldr	r1, [sp, #12]
 8000b96:	0020      	movs	r0, r4
 8000b98:	f7ff fd7c 	bl	8000694 <I2C_TransferConfig>
 8000b9c:	e7b2      	b.n	8000b04 <HAL_I2C_Master_Receive+0x7c>
 8000b9e:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8000ba0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ba2:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8000ba4:	b292      	uxth	r2, r2
 8000ba6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ba8:	b2d2      	uxtb	r2, r2
 8000baa:	9000      	str	r0, [sp, #0]
 8000bac:	e7f2      	b.n	8000b94 <HAL_I2C_Master_Receive+0x10c>
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	80002400 	.word	0x80002400
 8000bb4:	fe00e800 	.word	0xfe00e800

08000bb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bba:	0004      	movs	r4, r0
 8000bbc:	3441      	adds	r4, #65	; 0x41
 8000bbe:	7822      	ldrb	r2, [r4, #0]
{
 8000bc0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bc2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000bc4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000bc6:	2a20      	cmp	r2, #32
 8000bc8:	d118      	bne.n	8000bfc <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000bca:	001d      	movs	r5, r3
 8000bcc:	3540      	adds	r5, #64	; 0x40
 8000bce:	782e      	ldrb	r6, [r5, #0]
 8000bd0:	2e01      	cmp	r6, #1
 8000bd2:	d013      	beq.n	8000bfc <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000bd4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000bd6:	3022      	adds	r0, #34	; 0x22
 8000bd8:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000bda:	681e      	ldr	r6, [r3, #0]
 8000bdc:	3823      	subs	r0, #35	; 0x23
 8000bde:	4386      	bics	r6, r0
 8000be0:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000be2:	681e      	ldr	r6, [r3, #0]
 8000be4:	4f06      	ldr	r7, [pc, #24]	; (8000c00 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000be6:	403e      	ands	r6, r7
 8000be8:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000bea:	681e      	ldr	r6, [r3, #0]
 8000bec:	4331      	orrs	r1, r6
 8000bee:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000bf0:	6819      	ldr	r1, [r3, #0]
 8000bf2:	4308      	orrs	r0, r1
 8000bf4:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000bf6:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000bf8:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000bfa:	7028      	strb	r0, [r5, #0]
  }
}
 8000bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	ffffefff 	.word	0xffffefff

08000c04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000c04:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c06:	0005      	movs	r5, r0
 8000c08:	3541      	adds	r5, #65	; 0x41
 8000c0a:	782a      	ldrb	r2, [r5, #0]
{
 8000c0c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c0e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000c10:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c12:	2a20      	cmp	r2, #32
 8000c14:	d117      	bne.n	8000c46 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000c16:	001c      	movs	r4, r3
 8000c18:	3440      	adds	r4, #64	; 0x40
 8000c1a:	7826      	ldrb	r6, [r4, #0]
 8000c1c:	2e01      	cmp	r6, #1
 8000c1e:	d012      	beq.n	8000c46 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000c20:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c22:	3022      	adds	r0, #34	; 0x22
 8000c24:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000c26:	681e      	ldr	r6, [r3, #0]
 8000c28:	3823      	subs	r0, #35	; 0x23
 8000c2a:	4386      	bics	r6, r0
 8000c2c:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000c2e:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000c30:	4f05      	ldr	r7, [pc, #20]	; (8000c48 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000c32:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000c34:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000c36:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000c38:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000c3a:	6819      	ldr	r1, [r3, #0]
 8000c3c:	4308      	orrs	r0, r1
 8000c3e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000c40:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000c42:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000c44:	7020      	strb	r0, [r4, #0]
  }
}
 8000c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c48:	fffff0ff 	.word	0xfffff0ff

08000c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4e:	0004      	movs	r4, r0
 8000c50:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c52:	2800      	cmp	r0, #0
 8000c54:	d102      	bne.n	8000c5c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000c56:	2001      	movs	r0, #1
      }
    }
  }

  return HAL_OK;
}
 8000c58:	b005      	add	sp, #20
 8000c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c5c:	6803      	ldr	r3, [r0, #0]
 8000c5e:	07db      	lsls	r3, r3, #31
 8000c60:	d42e      	bmi.n	8000cc0 <HAL_RCC_OscConfig+0x74>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c62:	6823      	ldr	r3, [r4, #0]
 8000c64:	079b      	lsls	r3, r3, #30
 8000c66:	d47e      	bmi.n	8000d66 <HAL_RCC_OscConfig+0x11a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c68:	6823      	ldr	r3, [r4, #0]
 8000c6a:	071b      	lsls	r3, r3, #28
 8000c6c:	d500      	bpl.n	8000c70 <HAL_RCC_OscConfig+0x24>
 8000c6e:	e0ba      	b.n	8000de6 <HAL_RCC_OscConfig+0x19a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c70:	6823      	ldr	r3, [r4, #0]
 8000c72:	075b      	lsls	r3, r3, #29
 8000c74:	d500      	bpl.n	8000c78 <HAL_RCC_OscConfig+0x2c>
 8000c76:	e0dd      	b.n	8000e34 <HAL_RCC_OscConfig+0x1e8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000c78:	6823      	ldr	r3, [r4, #0]
 8000c7a:	06db      	lsls	r3, r3, #27
 8000c7c:	d51a      	bpl.n	8000cb4 <HAL_RCC_OscConfig+0x68>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000c7e:	6962      	ldr	r2, [r4, #20]
 8000c80:	4db4      	ldr	r5, [pc, #720]	; (8000f54 <HAL_RCC_OscConfig+0x308>)
 8000c82:	2304      	movs	r3, #4
 8000c84:	2a01      	cmp	r2, #1
 8000c86:	d000      	beq.n	8000c8a <HAL_RCC_OscConfig+0x3e>
 8000c88:	e149      	b.n	8000f1e <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c8a:	6b69      	ldr	r1, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c8c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c8e:	430b      	orrs	r3, r1
 8000c90:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000c92:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000c94:	431a      	orrs	r2, r3
 8000c96:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000c98:	f7ff fb1e 	bl	80002d8 <HAL_GetTick>
 8000c9c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000c9e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000ca0:	4233      	tst	r3, r6
 8000ca2:	d100      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x5a>
 8000ca4:	e134      	b.n	8000f10 <HAL_RCC_OscConfig+0x2c4>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ca6:	21f8      	movs	r1, #248	; 0xf8
 8000ca8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000caa:	69a3      	ldr	r3, [r4, #24]
 8000cac:	438a      	bics	r2, r1
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	636b      	str	r3, [r5, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cb4:	6a23      	ldr	r3, [r4, #32]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d000      	beq.n	8000cbc <HAL_RCC_OscConfig+0x70>
 8000cba:	e157      	b.n	8000f6c <HAL_RCC_OscConfig+0x320>
  return HAL_OK;
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	e7cb      	b.n	8000c58 <HAL_RCC_OscConfig+0xc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cc0:	210c      	movs	r1, #12
 8000cc2:	4da4      	ldr	r5, [pc, #656]	; (8000f54 <HAL_RCC_OscConfig+0x308>)
 8000cc4:	686a      	ldr	r2, [r5, #4]
 8000cc6:	400a      	ands	r2, r1
 8000cc8:	2a04      	cmp	r2, #4
 8000cca:	d006      	beq.n	8000cda <HAL_RCC_OscConfig+0x8e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ccc:	686b      	ldr	r3, [r5, #4]
 8000cce:	400b      	ands	r3, r1
 8000cd0:	2b08      	cmp	r3, #8
 8000cd2:	d109      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x9c>
 8000cd4:	686b      	ldr	r3, [r5, #4]
 8000cd6:	03db      	lsls	r3, r3, #15
 8000cd8:	d506      	bpl.n	8000ce8 <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cda:	682b      	ldr	r3, [r5, #0]
 8000cdc:	039b      	lsls	r3, r3, #14
 8000cde:	d5c0      	bpl.n	8000c62 <HAL_RCC_OscConfig+0x16>
 8000ce0:	6863      	ldr	r3, [r4, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1bd      	bne.n	8000c62 <HAL_RCC_OscConfig+0x16>
 8000ce6:	e7b6      	b.n	8000c56 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce8:	6863      	ldr	r3, [r4, #4]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d113      	bne.n	8000d16 <HAL_RCC_OscConfig+0xca>
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	682a      	ldr	r2, [r5, #0]
 8000cf2:	025b      	lsls	r3, r3, #9
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cf8:	f7ff faee 	bl	80002d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfc:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000cfe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d00:	02b6      	lsls	r6, r6, #10
 8000d02:	682b      	ldr	r3, [r5, #0]
 8000d04:	4233      	tst	r3, r6
 8000d06:	d1ac      	bne.n	8000c62 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d08:	f7ff fae6 	bl	80002d8 <HAL_GetTick>
 8000d0c:	1bc0      	subs	r0, r0, r7
 8000d0e:	2864      	cmp	r0, #100	; 0x64
 8000d10:	d9f7      	bls.n	8000d02 <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 8000d12:	2003      	movs	r0, #3
 8000d14:	e7a0      	b.n	8000c58 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d115      	bne.n	8000d46 <HAL_RCC_OscConfig+0xfa>
 8000d1a:	682b      	ldr	r3, [r5, #0]
 8000d1c:	4a8e      	ldr	r2, [pc, #568]	; (8000f58 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1e:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d20:	4013      	ands	r3, r2
 8000d22:	602b      	str	r3, [r5, #0]
 8000d24:	682b      	ldr	r3, [r5, #0]
 8000d26:	4a8d      	ldr	r2, [pc, #564]	; (8000f5c <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d28:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d2e:	f7ff fad3 	bl	80002d8 <HAL_GetTick>
 8000d32:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d34:	682b      	ldr	r3, [r5, #0]
 8000d36:	4233      	tst	r3, r6
 8000d38:	d093      	beq.n	8000c62 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d3a:	f7ff facd 	bl	80002d8 <HAL_GetTick>
 8000d3e:	1bc0      	subs	r0, r0, r7
 8000d40:	2864      	cmp	r0, #100	; 0x64
 8000d42:	d9f7      	bls.n	8000d34 <HAL_RCC_OscConfig+0xe8>
 8000d44:	e7e5      	b.n	8000d12 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d46:	2b05      	cmp	r3, #5
 8000d48:	d105      	bne.n	8000d56 <HAL_RCC_OscConfig+0x10a>
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	682a      	ldr	r2, [r5, #0]
 8000d4e:	02db      	lsls	r3, r3, #11
 8000d50:	4313      	orrs	r3, r2
 8000d52:	602b      	str	r3, [r5, #0]
 8000d54:	e7cb      	b.n	8000cee <HAL_RCC_OscConfig+0xa2>
 8000d56:	682b      	ldr	r3, [r5, #0]
 8000d58:	4a7f      	ldr	r2, [pc, #508]	; (8000f58 <HAL_RCC_OscConfig+0x30c>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	602b      	str	r3, [r5, #0]
 8000d5e:	682b      	ldr	r3, [r5, #0]
 8000d60:	4a7e      	ldr	r2, [pc, #504]	; (8000f5c <HAL_RCC_OscConfig+0x310>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	e7c7      	b.n	8000cf6 <HAL_RCC_OscConfig+0xaa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d66:	220c      	movs	r2, #12
 8000d68:	4d7a      	ldr	r5, [pc, #488]	; (8000f54 <HAL_RCC_OscConfig+0x308>)
 8000d6a:	686b      	ldr	r3, [r5, #4]
 8000d6c:	4213      	tst	r3, r2
 8000d6e:	d006      	beq.n	8000d7e <HAL_RCC_OscConfig+0x132>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d70:	686b      	ldr	r3, [r5, #4]
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b08      	cmp	r3, #8
 8000d76:	d111      	bne.n	8000d9c <HAL_RCC_OscConfig+0x150>
 8000d78:	686b      	ldr	r3, [r5, #4]
 8000d7a:	03db      	lsls	r3, r3, #15
 8000d7c:	d40e      	bmi.n	8000d9c <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d7e:	682b      	ldr	r3, [r5, #0]
 8000d80:	079b      	lsls	r3, r3, #30
 8000d82:	d503      	bpl.n	8000d8c <HAL_RCC_OscConfig+0x140>
 8000d84:	68e3      	ldr	r3, [r4, #12]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d000      	beq.n	8000d8c <HAL_RCC_OscConfig+0x140>
 8000d8a:	e764      	b.n	8000c56 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d8c:	21f8      	movs	r1, #248	; 0xf8
 8000d8e:	682a      	ldr	r2, [r5, #0]
 8000d90:	6923      	ldr	r3, [r4, #16]
 8000d92:	438a      	bics	r2, r1
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	4313      	orrs	r3, r2
 8000d98:	602b      	str	r3, [r5, #0]
 8000d9a:	e765      	b.n	8000c68 <HAL_RCC_OscConfig+0x1c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d9c:	68e2      	ldr	r2, [r4, #12]
 8000d9e:	2301      	movs	r3, #1
 8000da0:	2a00      	cmp	r2, #0
 8000da2:	d00f      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 8000da4:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da6:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000da8:	4313      	orrs	r3, r2
 8000daa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000dac:	f7ff fa94 	bl	80002d8 <HAL_GetTick>
 8000db0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db2:	682b      	ldr	r3, [r5, #0]
 8000db4:	4233      	tst	r3, r6
 8000db6:	d1e9      	bne.n	8000d8c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000db8:	f7ff fa8e 	bl	80002d8 <HAL_GetTick>
 8000dbc:	1bc0      	subs	r0, r0, r7
 8000dbe:	2802      	cmp	r0, #2
 8000dc0:	d9f7      	bls.n	8000db2 <HAL_RCC_OscConfig+0x166>
 8000dc2:	e7a6      	b.n	8000d12 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 8000dc4:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dc6:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000dc8:	439a      	bics	r2, r3
 8000dca:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fa84 	bl	80002d8 <HAL_GetTick>
 8000dd0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd2:	682b      	ldr	r3, [r5, #0]
 8000dd4:	4233      	tst	r3, r6
 8000dd6:	d100      	bne.n	8000dda <HAL_RCC_OscConfig+0x18e>
 8000dd8:	e746      	b.n	8000c68 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dda:	f7ff fa7d 	bl	80002d8 <HAL_GetTick>
 8000dde:	1bc0      	subs	r0, r0, r7
 8000de0:	2802      	cmp	r0, #2
 8000de2:	d9f6      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x186>
 8000de4:	e795      	b.n	8000d12 <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000de6:	69e2      	ldr	r2, [r4, #28]
 8000de8:	2301      	movs	r3, #1
 8000dea:	4d5a      	ldr	r5, [pc, #360]	; (8000f54 <HAL_RCC_OscConfig+0x308>)
 8000dec:	2a00      	cmp	r2, #0
 8000dee:	d010      	beq.n	8000e12 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8000df0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df2:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000df4:	4313      	orrs	r3, r2
 8000df6:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000df8:	f7ff fa6e 	bl	80002d8 <HAL_GetTick>
 8000dfc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000e00:	4233      	tst	r3, r6
 8000e02:	d000      	beq.n	8000e06 <HAL_RCC_OscConfig+0x1ba>
 8000e04:	e734      	b.n	8000c70 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e06:	f7ff fa67 	bl	80002d8 <HAL_GetTick>
 8000e0a:	1bc0      	subs	r0, r0, r7
 8000e0c:	2802      	cmp	r0, #2
 8000e0e:	d9f6      	bls.n	8000dfe <HAL_RCC_OscConfig+0x1b2>
 8000e10:	e77f      	b.n	8000d12 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 8000e12:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e14:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000e16:	439a      	bics	r2, r3
 8000e18:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000e1a:	f7ff fa5d 	bl	80002d8 <HAL_GetTick>
 8000e1e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e20:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000e22:	4233      	tst	r3, r6
 8000e24:	d100      	bne.n	8000e28 <HAL_RCC_OscConfig+0x1dc>
 8000e26:	e723      	b.n	8000c70 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e28:	f7ff fa56 	bl	80002d8 <HAL_GetTick>
 8000e2c:	1bc0      	subs	r0, r0, r7
 8000e2e:	2802      	cmp	r0, #2
 8000e30:	d9f6      	bls.n	8000e20 <HAL_RCC_OscConfig+0x1d4>
 8000e32:	e76e      	b.n	8000d12 <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e34:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000e36:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e38:	4d46      	ldr	r5, [pc, #280]	; (8000f54 <HAL_RCC_OscConfig+0x308>)
 8000e3a:	0552      	lsls	r2, r2, #21
 8000e3c:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000e3e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e40:	4213      	tst	r3, r2
 8000e42:	d108      	bne.n	8000e56 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e44:	69eb      	ldr	r3, [r5, #28]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61eb      	str	r3, [r5, #28]
 8000e4a:	69eb      	ldr	r3, [r5, #28]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	9303      	str	r3, [sp, #12]
 8000e50:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000e52:	2301      	movs	r3, #1
 8000e54:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e56:	2780      	movs	r7, #128	; 0x80
 8000e58:	4e41      	ldr	r6, [pc, #260]	; (8000f60 <HAL_RCC_OscConfig+0x314>)
 8000e5a:	007f      	lsls	r7, r7, #1
 8000e5c:	6833      	ldr	r3, [r6, #0]
 8000e5e:	423b      	tst	r3, r7
 8000e60:	d006      	beq.n	8000e70 <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e62:	68a3      	ldr	r3, [r4, #8]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d113      	bne.n	8000e90 <HAL_RCC_OscConfig+0x244>
 8000e68:	6a2a      	ldr	r2, [r5, #32]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	622b      	str	r3, [r5, #32]
 8000e6e:	e030      	b.n	8000ed2 <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e70:	6833      	ldr	r3, [r6, #0]
 8000e72:	433b      	orrs	r3, r7
 8000e74:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e76:	f7ff fa2f 	bl	80002d8 <HAL_GetTick>
 8000e7a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e7c:	6833      	ldr	r3, [r6, #0]
 8000e7e:	423b      	tst	r3, r7
 8000e80:	d1ef      	bne.n	8000e62 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e82:	f7ff fa29 	bl	80002d8 <HAL_GetTick>
 8000e86:	9b01      	ldr	r3, [sp, #4]
 8000e88:	1ac0      	subs	r0, r0, r3
 8000e8a:	2864      	cmp	r0, #100	; 0x64
 8000e8c:	d9f6      	bls.n	8000e7c <HAL_RCC_OscConfig+0x230>
 8000e8e:	e740      	b.n	8000d12 <HAL_RCC_OscConfig+0xc6>
 8000e90:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d114      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x274>
 8000e96:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e98:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e9a:	4393      	bics	r3, r2
 8000e9c:	622b      	str	r3, [r5, #32]
 8000e9e:	6a2b      	ldr	r3, [r5, #32]
 8000ea0:	3203      	adds	r2, #3
 8000ea2:	4393      	bics	r3, r2
 8000ea4:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000ea6:	f7ff fa17 	bl	80002d8 <HAL_GetTick>
 8000eaa:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eac:	6a2b      	ldr	r3, [r5, #32]
 8000eae:	423b      	tst	r3, r7
 8000eb0:	d025      	beq.n	8000efe <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eb2:	f7ff fa11 	bl	80002d8 <HAL_GetTick>
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <HAL_RCC_OscConfig+0x318>)
 8000eb8:	1b80      	subs	r0, r0, r6
 8000eba:	4298      	cmp	r0, r3
 8000ebc:	d9f6      	bls.n	8000eac <HAL_RCC_OscConfig+0x260>
 8000ebe:	e728      	b.n	8000d12 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ec0:	2b05      	cmp	r3, #5
 8000ec2:	d10b      	bne.n	8000edc <HAL_RCC_OscConfig+0x290>
 8000ec4:	6a29      	ldr	r1, [r5, #32]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	622b      	str	r3, [r5, #32]
 8000ecc:	6a2b      	ldr	r3, [r5, #32]
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8000ed2:	f7ff fa01 	bl	80002d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed6:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000ed8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eda:	e00d      	b.n	8000ef8 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000edc:	6a2b      	ldr	r3, [r5, #32]
 8000ede:	4393      	bics	r3, r2
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	622b      	str	r3, [r5, #32]
 8000ee4:	6a2b      	ldr	r3, [r5, #32]
 8000ee6:	4393      	bics	r3, r2
 8000ee8:	e7c0      	b.n	8000e6c <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eea:	f7ff f9f5 	bl	80002d8 <HAL_GetTick>
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <HAL_RCC_OscConfig+0x318>)
 8000ef0:	1b80      	subs	r0, r0, r6
 8000ef2:	4298      	cmp	r0, r3
 8000ef4:	d900      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x2ac>
 8000ef6:	e70c      	b.n	8000d12 <HAL_RCC_OscConfig+0xc6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef8:	6a2b      	ldr	r3, [r5, #32]
 8000efa:	423b      	tst	r3, r7
 8000efc:	d0f5      	beq.n	8000eea <HAL_RCC_OscConfig+0x29e>
    if(pwrclkchanged == SET)
 8000efe:	9b00      	ldr	r3, [sp, #0]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d000      	beq.n	8000f06 <HAL_RCC_OscConfig+0x2ba>
 8000f04:	e6b8      	b.n	8000c78 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f06:	69eb      	ldr	r3, [r5, #28]
 8000f08:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <HAL_RCC_OscConfig+0x31c>)
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61eb      	str	r3, [r5, #28]
 8000f0e:	e6b3      	b.n	8000c78 <HAL_RCC_OscConfig+0x2c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f10:	f7ff f9e2 	bl	80002d8 <HAL_GetTick>
 8000f14:	1bc0      	subs	r0, r0, r7
 8000f16:	2802      	cmp	r0, #2
 8000f18:	d800      	bhi.n	8000f1c <HAL_RCC_OscConfig+0x2d0>
 8000f1a:	e6c0      	b.n	8000c9e <HAL_RCC_OscConfig+0x52>
 8000f1c:	e6f9      	b.n	8000d12 <HAL_RCC_OscConfig+0xc6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000f1e:	3205      	adds	r2, #5
 8000f20:	d103      	bne.n	8000f2a <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000f22:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000f24:	439a      	bics	r2, r3
 8000f26:	636a      	str	r2, [r5, #52]	; 0x34
 8000f28:	e6bd      	b.n	8000ca6 <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f2a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f2c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f2e:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000f30:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f32:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000f34:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f36:	4393      	bics	r3, r2
 8000f38:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000f3a:	f7ff f9cd 	bl	80002d8 <HAL_GetTick>
 8000f3e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f40:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f42:	4233      	tst	r3, r6
 8000f44:	d100      	bne.n	8000f48 <HAL_RCC_OscConfig+0x2fc>
 8000f46:	e6b5      	b.n	8000cb4 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f48:	f7ff f9c6 	bl	80002d8 <HAL_GetTick>
 8000f4c:	1bc0      	subs	r0, r0, r7
 8000f4e:	2802      	cmp	r0, #2
 8000f50:	d9f6      	bls.n	8000f40 <HAL_RCC_OscConfig+0x2f4>
 8000f52:	e6de      	b.n	8000d12 <HAL_RCC_OscConfig+0xc6>
 8000f54:	40021000 	.word	0x40021000
 8000f58:	fffeffff 	.word	0xfffeffff
 8000f5c:	fffbffff 	.word	0xfffbffff
 8000f60:	40007000 	.word	0x40007000
 8000f64:	00001388 	.word	0x00001388
 8000f68:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f6c:	200c      	movs	r0, #12
 8000f6e:	4a35      	ldr	r2, [pc, #212]	; (8001044 <HAL_RCC_OscConfig+0x3f8>)
 8000f70:	6851      	ldr	r1, [r2, #4]
 8000f72:	0015      	movs	r5, r2
 8000f74:	4001      	ands	r1, r0
 8000f76:	2908      	cmp	r1, #8
 8000f78:	d047      	beq.n	800100a <HAL_RCC_OscConfig+0x3be>
 8000f7a:	4a33      	ldr	r2, [pc, #204]	; (8001048 <HAL_RCC_OscConfig+0x3fc>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d132      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_PLL_DISABLE();
 8000f80:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f82:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000f84:	4013      	ands	r3, r2
 8000f86:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f88:	f7ff f9a6 	bl	80002d8 <HAL_GetTick>
 8000f8c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f8e:	04b6      	lsls	r6, r6, #18
 8000f90:	682b      	ldr	r3, [r5, #0]
 8000f92:	4233      	tst	r3, r6
 8000f94:	d121      	bne.n	8000fda <HAL_RCC_OscConfig+0x38e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f96:	220f      	movs	r2, #15
 8000f98:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f9a:	4393      	bics	r3, r2
 8000f9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000fa2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000fa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fa6:	686a      	ldr	r2, [r5, #4]
 8000fa8:	430b      	orrs	r3, r1
 8000faa:	4928      	ldr	r1, [pc, #160]	; (800104c <HAL_RCC_OscConfig+0x400>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fac:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fae:	400a      	ands	r2, r1
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	682a      	ldr	r2, [r5, #0]
 8000fb8:	045b      	lsls	r3, r3, #17
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fbe:	f7ff f98b 	bl	80002d8 <HAL_GetTick>
 8000fc2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fc4:	04a4      	lsls	r4, r4, #18
 8000fc6:	682b      	ldr	r3, [r5, #0]
 8000fc8:	4223      	tst	r3, r4
 8000fca:	d000      	beq.n	8000fce <HAL_RCC_OscConfig+0x382>
 8000fcc:	e676      	b.n	8000cbc <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fce:	f7ff f983 	bl	80002d8 <HAL_GetTick>
 8000fd2:	1b80      	subs	r0, r0, r6
 8000fd4:	2802      	cmp	r0, #2
 8000fd6:	d9f6      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x37a>
 8000fd8:	e69b      	b.n	8000d12 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fda:	f7ff f97d 	bl	80002d8 <HAL_GetTick>
 8000fde:	1bc0      	subs	r0, r0, r7
 8000fe0:	2802      	cmp	r0, #2
 8000fe2:	d9d5      	bls.n	8000f90 <HAL_RCC_OscConfig+0x344>
 8000fe4:	e695      	b.n	8000d12 <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 8000fe6:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe8:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000fea:	4013      	ands	r3, r2
 8000fec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fee:	f7ff f973 	bl	80002d8 <HAL_GetTick>
 8000ff2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff4:	04a4      	lsls	r4, r4, #18
 8000ff6:	682b      	ldr	r3, [r5, #0]
 8000ff8:	4223      	tst	r3, r4
 8000ffa:	d100      	bne.n	8000ffe <HAL_RCC_OscConfig+0x3b2>
 8000ffc:	e65e      	b.n	8000cbc <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ffe:	f7ff f96b 	bl	80002d8 <HAL_GetTick>
 8001002:	1b80      	subs	r0, r0, r6
 8001004:	2802      	cmp	r0, #2
 8001006:	d9f6      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x3aa>
 8001008:	e683      	b.n	8000d12 <HAL_RCC_OscConfig+0xc6>
        return HAL_ERROR;
 800100a:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800100c:	2b01      	cmp	r3, #1
 800100e:	d100      	bne.n	8001012 <HAL_RCC_OscConfig+0x3c6>
 8001010:	e622      	b.n	8000c58 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001012:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8001014:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001016:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001018:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 800101a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800101c:	4019      	ands	r1, r3
        return HAL_ERROR;
 800101e:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001020:	42a9      	cmp	r1, r5
 8001022:	d000      	beq.n	8001026 <HAL_RCC_OscConfig+0x3da>
 8001024:	e618      	b.n	8000c58 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001026:	210f      	movs	r1, #15
 8001028:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800102a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800102c:	428a      	cmp	r2, r1
 800102e:	d000      	beq.n	8001032 <HAL_RCC_OscConfig+0x3e6>
 8001030:	e612      	b.n	8000c58 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001032:	20f0      	movs	r0, #240	; 0xf0
 8001034:	0380      	lsls	r0, r0, #14
 8001036:	4003      	ands	r3, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001038:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800103a:	1a1b      	subs	r3, r3, r0
 800103c:	1e58      	subs	r0, r3, #1
 800103e:	4183      	sbcs	r3, r0
    return HAL_ERROR;
 8001040:	b2d8      	uxtb	r0, r3
 8001042:	e609      	b.n	8000c58 <HAL_RCC_OscConfig+0xc>
 8001044:	40021000 	.word	0x40021000
 8001048:	feffffff 	.word	0xfeffffff
 800104c:	ffc2ffff 	.word	0xffc2ffff

08001050 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001050:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001052:	4c14      	ldr	r4, [pc, #80]	; (80010a4 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8001054:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001056:	2210      	movs	r2, #16
 8001058:	0021      	movs	r1, r4
 800105a:	4668      	mov	r0, sp
 800105c:	f001 fb8e 	bl	800277c <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001060:	0021      	movs	r1, r4
 8001062:	ad04      	add	r5, sp, #16
 8001064:	2210      	movs	r2, #16
 8001066:	3110      	adds	r1, #16
 8001068:	0028      	movs	r0, r5
 800106a:	f001 fb87 	bl	800277c <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800106e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001070:	4e0d      	ldr	r6, [pc, #52]	; (80010a8 <HAL_RCC_GetSysClockFreq+0x58>)
 8001072:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001074:	401a      	ands	r2, r3
 8001076:	2a08      	cmp	r2, #8
 8001078:	d111      	bne.n	800109e <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800107a:	200f      	movs	r0, #15
 800107c:	466a      	mov	r2, sp
 800107e:	0c99      	lsrs	r1, r3, #18
 8001080:	4001      	ands	r1, r0
 8001082:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001084:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001086:	4002      	ands	r2, r0
 8001088:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800108a:	03db      	lsls	r3, r3, #15
 800108c:	d505      	bpl.n	800109a <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800108e:	4807      	ldr	r0, [pc, #28]	; (80010ac <HAL_RCC_GetSysClockFreq+0x5c>)
 8001090:	f7ff f856 	bl	8000140 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001094:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001096:	b008      	add	sp, #32
 8001098:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x60>)
 800109c:	e7fa      	b.n	8001094 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 800109e:	4803      	ldr	r0, [pc, #12]	; (80010ac <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80010a0:	e7f9      	b.n	8001096 <HAL_RCC_GetSysClockFreq+0x46>
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	080027b8 	.word	0x080027b8
 80010a8:	40021000 	.word	0x40021000
 80010ac:	007a1200 	.word	0x007a1200
 80010b0:	003d0900 	.word	0x003d0900

080010b4 <HAL_RCC_ClockConfig>:
{
 80010b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80010b6:	0005      	movs	r5, r0
 80010b8:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 80010ba:	2800      	cmp	r0, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80010be:	2001      	movs	r0, #1
}
 80010c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010c2:	2201      	movs	r2, #1
 80010c4:	4c37      	ldr	r4, [pc, #220]	; (80011a4 <HAL_RCC_ClockConfig+0xf0>)
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	4013      	ands	r3, r2
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d31c      	bcc.n	8001108 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010ce:	6829      	ldr	r1, [r5, #0]
 80010d0:	078b      	lsls	r3, r1, #30
 80010d2:	d422      	bmi.n	800111a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010d4:	07cb      	lsls	r3, r1, #31
 80010d6:	d42f      	bmi.n	8001138 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010d8:	2301      	movs	r3, #1
 80010da:	6822      	ldr	r2, [r4, #0]
 80010dc:	401a      	ands	r2, r3
 80010de:	4297      	cmp	r7, r2
 80010e0:	d351      	bcc.n	8001186 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e2:	682b      	ldr	r3, [r5, #0]
 80010e4:	4c30      	ldr	r4, [pc, #192]	; (80011a8 <HAL_RCC_ClockConfig+0xf4>)
 80010e6:	075b      	lsls	r3, r3, #29
 80010e8:	d454      	bmi.n	8001194 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80010ea:	f7ff ffb1 	bl	8001050 <HAL_RCC_GetSysClockFreq>
 80010ee:	6863      	ldr	r3, [r4, #4]
 80010f0:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <HAL_RCC_ClockConfig+0xf8>)
 80010f2:	061b      	lsls	r3, r3, #24
 80010f4:	0f1b      	lsrs	r3, r3, #28
 80010f6:	5cd3      	ldrb	r3, [r2, r3]
 80010f8:	40d8      	lsrs	r0, r3
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_RCC_ClockConfig+0xfc>)
 80010fc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff f8aa 	bl	8000258 <HAL_InitTick>
  return HAL_OK;
 8001104:	2000      	movs	r0, #0
 8001106:	e7db      	b.n	80010c0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	4393      	bics	r3, r2
 800110c:	430b      	orrs	r3, r1
 800110e:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001110:	6823      	ldr	r3, [r4, #0]
 8001112:	4013      	ands	r3, r2
 8001114:	4299      	cmp	r1, r3
 8001116:	d1d2      	bne.n	80010be <HAL_RCC_ClockConfig+0xa>
 8001118:	e7d9      	b.n	80010ce <HAL_RCC_ClockConfig+0x1a>
 800111a:	4a23      	ldr	r2, [pc, #140]	; (80011a8 <HAL_RCC_ClockConfig+0xf4>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800111c:	074b      	lsls	r3, r1, #29
 800111e:	d504      	bpl.n	800112a <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001120:	23e0      	movs	r3, #224	; 0xe0
 8001122:	6850      	ldr	r0, [r2, #4]
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4303      	orrs	r3, r0
 8001128:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800112a:	20f0      	movs	r0, #240	; 0xf0
 800112c:	6853      	ldr	r3, [r2, #4]
 800112e:	4383      	bics	r3, r0
 8001130:	68a8      	ldr	r0, [r5, #8]
 8001132:	4303      	orrs	r3, r0
 8001134:	6053      	str	r3, [r2, #4]
 8001136:	e7cd      	b.n	80010d4 <HAL_RCC_ClockConfig+0x20>
 8001138:	4e1b      	ldr	r6, [pc, #108]	; (80011a8 <HAL_RCC_ClockConfig+0xf4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800113a:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113c:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800113e:	2a01      	cmp	r2, #1
 8001140:	d119      	bne.n	8001176 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	039b      	lsls	r3, r3, #14
 8001144:	d5bb      	bpl.n	80010be <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001146:	2103      	movs	r1, #3
 8001148:	6873      	ldr	r3, [r6, #4]
 800114a:	438b      	bics	r3, r1
 800114c:	4313      	orrs	r3, r2
 800114e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001150:	f7ff f8c2 	bl	80002d8 <HAL_GetTick>
 8001154:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001156:	230c      	movs	r3, #12
 8001158:	6872      	ldr	r2, [r6, #4]
 800115a:	401a      	ands	r2, r3
 800115c:	686b      	ldr	r3, [r5, #4]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	429a      	cmp	r2, r3
 8001162:	d0b9      	beq.n	80010d8 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001164:	f7ff f8b8 	bl	80002d8 <HAL_GetTick>
 8001168:	9b01      	ldr	r3, [sp, #4]
 800116a:	1ac0      	subs	r0, r0, r3
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_RCC_ClockConfig+0x100>)
 800116e:	4298      	cmp	r0, r3
 8001170:	d9f1      	bls.n	8001156 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8001172:	2003      	movs	r0, #3
 8001174:	e7a4      	b.n	80010c0 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001176:	2a02      	cmp	r2, #2
 8001178:	d102      	bne.n	8001180 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117a:	019b      	lsls	r3, r3, #6
 800117c:	d4e3      	bmi.n	8001146 <HAL_RCC_ClockConfig+0x92>
 800117e:	e79e      	b.n	80010be <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001180:	079b      	lsls	r3, r3, #30
 8001182:	d4e0      	bmi.n	8001146 <HAL_RCC_ClockConfig+0x92>
 8001184:	e79b      	b.n	80010be <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001186:	6822      	ldr	r2, [r4, #0]
 8001188:	439a      	bics	r2, r3
 800118a:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800118c:	6822      	ldr	r2, [r4, #0]
 800118e:	421a      	tst	r2, r3
 8001190:	d195      	bne.n	80010be <HAL_RCC_ClockConfig+0xa>
 8001192:	e7a6      	b.n	80010e2 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001194:	6863      	ldr	r3, [r4, #4]
 8001196:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <HAL_RCC_ClockConfig+0x104>)
 8001198:	4013      	ands	r3, r2
 800119a:	68ea      	ldr	r2, [r5, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	6063      	str	r3, [r4, #4]
 80011a0:	e7a3      	b.n	80010ea <HAL_RCC_ClockConfig+0x36>
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	40022000 	.word	0x40022000
 80011a8:	40021000 	.word	0x40021000
 80011ac:	08002885 	.word	0x08002885
 80011b0:	20000054 	.word	0x20000054
 80011b4:	00001388 	.word	0x00001388
 80011b8:	fffff8ff 	.word	0xfffff8ff

080011bc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	055b      	lsls	r3, r3, #21
 80011c4:	0f5b      	lsrs	r3, r3, #29
 80011c6:	5cd3      	ldrb	r3, [r2, r3]
 80011c8:	4a03      	ldr	r2, [pc, #12]	; (80011d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80011ca:	6810      	ldr	r0, [r2, #0]
 80011cc:	40d8      	lsrs	r0, r3
}    
 80011ce:	4770      	bx	lr
 80011d0:	40021000 	.word	0x40021000
 80011d4:	08002895 	.word	0x08002895
 80011d8:	20000054 	.word	0x20000054

080011dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80011dc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80011de:	6803      	ldr	r3, [r0, #0]
{
 80011e0:	b085      	sub	sp, #20
 80011e2:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80011e4:	03db      	lsls	r3, r3, #15
 80011e6:	d528      	bpl.n	800123a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80011ea:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ec:	4c3b      	ldr	r4, [pc, #236]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x100>)
 80011ee:	0552      	lsls	r2, r2, #21
 80011f0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80011f2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011f4:	4213      	tst	r3, r2
 80011f6:	d108      	bne.n	800120a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80011f8:	69e3      	ldr	r3, [r4, #28]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61e3      	str	r3, [r4, #28]
 80011fe:	69e3      	ldr	r3, [r4, #28]
 8001200:	4013      	ands	r3, r2
 8001202:	9303      	str	r3, [sp, #12]
 8001204:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001206:	2301      	movs	r3, #1
 8001208:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120a:	2780      	movs	r7, #128	; 0x80
 800120c:	4e34      	ldr	r6, [pc, #208]	; (80012e0 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 800120e:	007f      	lsls	r7, r7, #1
 8001210:	6833      	ldr	r3, [r6, #0]
 8001212:	423b      	tst	r3, r7
 8001214:	d02f      	beq.n	8001276 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001216:	22c0      	movs	r2, #192	; 0xc0
 8001218:	6a23      	ldr	r3, [r4, #32]
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	4013      	ands	r3, r2
 800121e:	4e31      	ldr	r6, [pc, #196]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001220:	d13b      	bne.n	800129a <HAL_RCCEx_PeriphCLKConfig+0xbe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001222:	6a23      	ldr	r3, [r4, #32]
 8001224:	401e      	ands	r6, r3
 8001226:	686b      	ldr	r3, [r5, #4]
 8001228:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800122a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800122c:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 800122e:	2b01      	cmp	r3, #1
 8001230:	d103      	bne.n	800123a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001232:	69e3      	ldr	r3, [r4, #28]
 8001234:	4a2c      	ldr	r2, [pc, #176]	; (80012e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8001236:	4013      	ands	r3, r2
 8001238:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800123a:	682a      	ldr	r2, [r5, #0]
 800123c:	07d3      	lsls	r3, r2, #31
 800123e:	d506      	bpl.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001240:	2003      	movs	r0, #3
 8001242:	4926      	ldr	r1, [pc, #152]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001244:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001246:	4383      	bics	r3, r0
 8001248:	68a8      	ldr	r0, [r5, #8]
 800124a:	4303      	orrs	r3, r0
 800124c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800124e:	0693      	lsls	r3, r2, #26
 8001250:	d506      	bpl.n	8001260 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001252:	2010      	movs	r0, #16
 8001254:	4921      	ldr	r1, [pc, #132]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001256:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001258:	4383      	bics	r3, r0
 800125a:	68e8      	ldr	r0, [r5, #12]
 800125c:	4303      	orrs	r3, r0
 800125e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001260:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001262:	0553      	lsls	r3, r2, #21
 8001264:	d517      	bpl.n	8001296 <HAL_RCCEx_PeriphCLKConfig+0xba>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001266:	2140      	movs	r1, #64	; 0x40
 8001268:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <HAL_RCCEx_PeriphCLKConfig+0x100>)
 800126a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800126c:	438b      	bics	r3, r1
 800126e:	6929      	ldr	r1, [r5, #16]
 8001270:	430b      	orrs	r3, r1
 8001272:	6313      	str	r3, [r2, #48]	; 0x30
 8001274:	e00f      	b.n	8001296 <HAL_RCCEx_PeriphCLKConfig+0xba>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001276:	6833      	ldr	r3, [r6, #0]
 8001278:	433b      	orrs	r3, r7
 800127a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800127c:	f7ff f82c 	bl	80002d8 <HAL_GetTick>
 8001280:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001282:	6833      	ldr	r3, [r6, #0]
 8001284:	423b      	tst	r3, r7
 8001286:	d1c6      	bne.n	8001216 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001288:	f7ff f826 	bl	80002d8 <HAL_GetTick>
 800128c:	9b01      	ldr	r3, [sp, #4]
 800128e:	1ac0      	subs	r0, r0, r3
 8001290:	2864      	cmp	r0, #100	; 0x64
 8001292:	d9f6      	bls.n	8001282 <HAL_RCCEx_PeriphCLKConfig+0xa6>
          return HAL_TIMEOUT;
 8001294:	2003      	movs	r0, #3
}
 8001296:	b005      	add	sp, #20
 8001298:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800129a:	6869      	ldr	r1, [r5, #4]
 800129c:	400a      	ands	r2, r1
 800129e:	4293      	cmp	r3, r2
 80012a0:	d0bf      	beq.n	8001222 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 80012a2:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012a4:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80012a6:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012a8:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 80012aa:	025b      	lsls	r3, r3, #9
 80012ac:	4303      	orrs	r3, r0
 80012ae:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80012b0:	6a23      	ldr	r3, [r4, #32]
 80012b2:	480e      	ldr	r0, [pc, #56]	; (80012ec <HAL_RCCEx_PeriphCLKConfig+0x110>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012b4:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80012b6:	4003      	ands	r3, r0
 80012b8:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80012ba:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80012bc:	07d3      	lsls	r3, r2, #31
 80012be:	d5b0      	bpl.n	8001222 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 80012c0:	f7ff f80a 	bl	80002d8 <HAL_GetTick>
 80012c4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c6:	2202      	movs	r2, #2
 80012c8:	6a23      	ldr	r3, [r4, #32]
 80012ca:	4213      	tst	r3, r2
 80012cc:	d1a9      	bne.n	8001222 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ce:	f7ff f803 	bl	80002d8 <HAL_GetTick>
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80012d4:	1bc0      	subs	r0, r0, r7
 80012d6:	4298      	cmp	r0, r3
 80012d8:	d9f5      	bls.n	80012c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80012da:	e7db      	b.n	8001294 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40007000 	.word	0x40007000
 80012e4:	fffffcff 	.word	0xfffffcff
 80012e8:	efffffff 	.word	0xefffffff
 80012ec:	fffeffff 	.word	0xfffeffff
 80012f0:	00001388 	.word	0x00001388

080012f4 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80012f4:	21e0      	movs	r1, #224	; 0xe0
 80012f6:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80012f8:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	438a      	bics	r2, r1
 80012fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001300:	2282      	movs	r2, #130	; 0x82
 8001302:	6841      	ldr	r1, [r0, #4]
 8001304:	0052      	lsls	r2, r2, #1
 8001306:	4291      	cmp	r1, r2
 8001308:	d10c      	bne.n	8001324 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 800130a:	2180      	movs	r1, #128	; 0x80
 800130c:	6882      	ldr	r2, [r0, #8]
 800130e:	0209      	lsls	r1, r1, #8
 8001310:	428a      	cmp	r2, r1
 8001312:	d003      	beq.n	800131c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001314:	2180      	movs	r1, #128	; 0x80
 8001316:	00c9      	lsls	r1, r1, #3
 8001318:	428a      	cmp	r2, r1
 800131a:	d103      	bne.n	8001324 <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800131c:	2140      	movs	r1, #64	; 0x40
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	438a      	bics	r2, r1
 8001322:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001328:	0189      	lsls	r1, r1, #6
 800132a:	428a      	cmp	r2, r1
 800132c:	d106      	bne.n	800133c <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 800132e:	6819      	ldr	r1, [r3, #0]
 8001330:	4c07      	ldr	r4, [pc, #28]	; (8001350 <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8001332:	4021      	ands	r1, r4
 8001334:	6019      	str	r1, [r3, #0]
 8001336:	6819      	ldr	r1, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800133c:	0003      	movs	r3, r0
 800133e:	2201      	movs	r2, #1
 8001340:	335d      	adds	r3, #93	; 0x5d
 8001342:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001344:	2300      	movs	r3, #0
 8001346:	305c      	adds	r0, #92	; 0x5c
 8001348:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 800134a:	2003      	movs	r0, #3
 800134c:	bd10      	pop	{r4, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	ffffdfff 	.word	0xffffdfff

08001354 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001356:	0004      	movs	r4, r0
 8001358:	000d      	movs	r5, r1
 800135a:	0017      	movs	r7, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800135c:	2680      	movs	r6, #128	; 0x80
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	6898      	ldr	r0, [r3, #8]
 8001362:	4030      	ands	r0, r6
 8001364:	d009      	beq.n	800137a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x26>
    if (Timeout != HAL_MAX_DELAY)
 8001366:	1c6a      	adds	r2, r5, #1
 8001368:	d0fa      	beq.n	8001360 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800136a:	f7fe ffb5 	bl	80002d8 <HAL_GetTick>
 800136e:	1bc0      	subs	r0, r0, r7
 8001370:	4285      	cmp	r5, r0
 8001372:	d8f4      	bhi.n	800135e <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
 8001374:	0020      	movs	r0, r4
 8001376:	f7ff ffbd 	bl	80012f4 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 800137a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800137c <SPI_WaitFifoStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800137c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800137e:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001380:	0005      	movs	r5, r0
 8001382:	000c      	movs	r4, r1
 8001384:	0016      	movs	r6, r2
 8001386:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001388:	00ff      	lsls	r7, r7, #3
  while ((hspi->Instance->SR & Fifo) != State)
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	6898      	ldr	r0, [r3, #8]
 800138e:	4020      	ands	r0, r4
 8001390:	d00d      	beq.n	80013ae <SPI_WaitFifoStateUntilTimeout.constprop.10+0x32>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001392:	42bc      	cmp	r4, r7
 8001394:	d100      	bne.n	8001398 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x1c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001396:	7b1a      	ldrb	r2, [r3, #12]
    if (Timeout != HAL_MAX_DELAY)
 8001398:	1c72      	adds	r2, r6, #1
 800139a:	d0f7      	beq.n	800138c <SPI_WaitFifoStateUntilTimeout.constprop.10+0x10>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800139c:	f7fe ff9c 	bl	80002d8 <HAL_GetTick>
 80013a0:	9b01      	ldr	r3, [sp, #4]
 80013a2:	1ac0      	subs	r0, r0, r3
 80013a4:	4286      	cmp	r6, r0
 80013a6:	d8f0      	bhi.n	800138a <SPI_WaitFifoStateUntilTimeout.constprop.10+0xe>
 80013a8:	0028      	movs	r0, r5
 80013aa:	f7ff ffa3 	bl	80012f4 <SPI_WaitFifoStateUntilTimeout.part.1>
}
 80013ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080013b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80013b0:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80013b2:	0013      	movs	r3, r2
{
 80013b4:	000d      	movs	r5, r1
 80013b6:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80013b8:	000a      	movs	r2, r1
 80013ba:	21c0      	movs	r1, #192	; 0xc0
 80013bc:	0149      	lsls	r1, r1, #5
{
 80013be:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80013c0:	f7ff ffdc 	bl	800137c <SPI_WaitFifoStateUntilTimeout.constprop.10>
 80013c4:	2800      	cmp	r0, #0
 80013c6:	d005      	beq.n	80013d4 <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80013c8:	2320      	movs	r3, #32
 80013ca:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80013cc:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80013ce:	4313      	orrs	r3, r2
 80013d0:	6623      	str	r3, [r4, #96]	; 0x60
 80013d2:	e00f      	b.n	80013f4 <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80013d4:	0032      	movs	r2, r6
 80013d6:	0029      	movs	r1, r5
 80013d8:	0020      	movs	r0, r4
 80013da:	f7ff ffbb 	bl	8001354 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 80013de:	2800      	cmp	r0, #0
 80013e0:	d1f2      	bne.n	80013c8 <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80013e2:	21c0      	movs	r1, #192	; 0xc0
 80013e4:	0033      	movs	r3, r6
 80013e6:	002a      	movs	r2, r5
 80013e8:	00c9      	lsls	r1, r1, #3
 80013ea:	0020      	movs	r0, r4
 80013ec:	f7ff ffc6 	bl	800137c <SPI_WaitFifoStateUntilTimeout.constprop.10>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	d1e9      	bne.n	80013c8 <SPI_EndRxTxTransaction+0x18>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80013f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080013f8 <HAL_SPI_Init>:
{
 80013f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013fa:	0004      	movs	r4, r0
    return HAL_ERROR;
 80013fc:	2001      	movs	r0, #1
  if (hspi == NULL)
 80013fe:	2c00      	cmp	r4, #0
 8001400:	d04b      	beq.n	800149a <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001402:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001404:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001406:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001408:	355d      	adds	r5, #93	; 0x5d
 800140a:	782b      	ldrb	r3, [r5, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d105      	bne.n	800141e <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8001412:	0022      	movs	r2, r4
 8001414:	325c      	adds	r2, #92	; 0x5c
 8001416:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8001418:	0020      	movs	r0, r4
 800141a:	f001 f81f 	bl	800245c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800141e:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001420:	2240      	movs	r2, #64	; 0x40
 8001422:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001424:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8001426:	680b      	ldr	r3, [r1, #0]
 8001428:	2000      	movs	r0, #0
 800142a:	4393      	bics	r3, r2
 800142c:	600b      	str	r3, [r1, #0]
 800142e:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001430:	68e2      	ldr	r2, [r4, #12]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	429a      	cmp	r2, r3
 8001436:	d931      	bls.n	800149c <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001438:	26f0      	movs	r6, #240	; 0xf0
 800143a:	0136      	lsls	r6, r6, #4
 800143c:	42b2      	cmp	r2, r6
 800143e:	d133      	bne.n	80014a8 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001440:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001442:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001444:	2800      	cmp	r0, #0
 8001446:	d103      	bne.n	8001450 <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001448:	429a      	cmp	r2, r3
 800144a:	d92f      	bls.n	80014ac <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800144c:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800144e:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001450:	68a7      	ldr	r7, [r4, #8]
 8001452:	6863      	ldr	r3, [r4, #4]
 8001454:	69a0      	ldr	r0, [r4, #24]
 8001456:	433b      	orrs	r3, r7
 8001458:	6927      	ldr	r7, [r4, #16]
 800145a:	433b      	orrs	r3, r7
 800145c:	6967      	ldr	r7, [r4, #20]
 800145e:	433b      	orrs	r3, r7
 8001460:	69e7      	ldr	r7, [r4, #28]
 8001462:	433b      	orrs	r3, r7
 8001464:	6a27      	ldr	r7, [r4, #32]
 8001466:	433b      	orrs	r3, r7
 8001468:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800146a:	433b      	orrs	r3, r7
 800146c:	2780      	movs	r7, #128	; 0x80
 800146e:	00bf      	lsls	r7, r7, #2
 8001470:	4007      	ands	r7, r0
 8001472:	433b      	orrs	r3, r7
 8001474:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001478:	0c00      	lsrs	r0, r0, #16
 800147a:	431a      	orrs	r2, r3
 800147c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800147e:	431a      	orrs	r2, r3
 8001480:	2304      	movs	r3, #4
 8001482:	4018      	ands	r0, r3
 8001484:	4310      	orrs	r0, r2
 8001486:	4306      	orrs	r6, r0
 8001488:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800148a:	69cb      	ldr	r3, [r1, #28]
 800148c:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800148e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001490:	4013      	ands	r3, r2
 8001492:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001494:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001496:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001498:	702b      	strb	r3, [r5, #0]
}
 800149a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800149c:	2680      	movs	r6, #128	; 0x80
 800149e:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d0ce      	beq.n	8001442 <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a4:	62a0      	str	r0, [r4, #40]	; 0x28
 80014a6:	e7cc      	b.n	8001442 <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80014a8:	0006      	movs	r6, r0
 80014aa:	e7fb      	b.n	80014a4 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e7ce      	b.n	800144e <HAL_SPI_Init+0x56>
 80014b0:	fffff7ff 	.word	0xfffff7ff

080014b4 <HAL_SPI_Transmit>:
{
 80014b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b6:	b087      	sub	sp, #28
 80014b8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hspi);
 80014ba:	0003      	movs	r3, r0
 80014bc:	335c      	adds	r3, #92	; 0x5c
 80014be:	9303      	str	r3, [sp, #12]
 80014c0:	781b      	ldrb	r3, [r3, #0]
{
 80014c2:	0004      	movs	r4, r0
 80014c4:	000d      	movs	r5, r1
 80014c6:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 80014c8:	2602      	movs	r6, #2
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d100      	bne.n	80014d0 <HAL_SPI_Transmit+0x1c>
 80014ce:	e07c      	b.n	80015ca <HAL_SPI_Transmit+0x116>
 80014d0:	2301      	movs	r3, #1
 80014d2:	9a03      	ldr	r2, [sp, #12]
 80014d4:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80014d6:	f7fe feff 	bl	80002d8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80014da:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 80014dc:	9002      	str	r0, [sp, #8]
  if (hspi->State != HAL_SPI_STATE_READY)
 80014de:	325d      	adds	r2, #93	; 0x5d
 80014e0:	7813      	ldrb	r3, [r2, #0]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d16a      	bne.n	80015be <HAL_SPI_Transmit+0x10a>
    errorcode = HAL_ERROR;
 80014e8:	001e      	movs	r6, r3
  if ((pData == NULL) || (Size == 0U))
 80014ea:	2d00      	cmp	r5, #0
 80014ec:	d067      	beq.n	80015be <HAL_SPI_Transmit+0x10a>
 80014ee:	2f00      	cmp	r7, #0
 80014f0:	d065      	beq.n	80015be <HAL_SPI_Transmit+0x10a>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80014f2:	3302      	adds	r3, #2
 80014f4:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014f6:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 80014f8:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80014fa:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80014fc:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80014fe:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001500:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001502:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 8001504:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8001506:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001508:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800150a:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 800150c:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	68a2      	ldr	r2, [r4, #8]
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	429a      	cmp	r2, r3
 8001516:	d105      	bne.n	8001524 <HAL_SPI_Transmit+0x70>
    SPI_1LINE_TX(hspi);
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	6822      	ldr	r2, [r4, #0]
 800151c:	01db      	lsls	r3, r3, #7
 800151e:	6811      	ldr	r1, [r2, #0]
 8001520:	430b      	orrs	r3, r1
 8001522:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001524:	2240      	movs	r2, #64	; 0x40
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	6819      	ldr	r1, [r3, #0]
 800152a:	4211      	tst	r1, r2
 800152c:	d102      	bne.n	8001534 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 800152e:	6819      	ldr	r1, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001534:	21e0      	movs	r1, #224	; 0xe0
 8001536:	68e0      	ldr	r0, [r4, #12]
 8001538:	00c9      	lsls	r1, r1, #3
 800153a:	6862      	ldr	r2, [r4, #4]
 800153c:	4288      	cmp	r0, r1
 800153e:	d947      	bls.n	80015d0 <HAL_SPI_Transmit+0x11c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001540:	2a00      	cmp	r2, #0
 8001542:	d001      	beq.n	8001548 <HAL_SPI_Transmit+0x94>
 8001544:	2f01      	cmp	r7, #1
 8001546:	d107      	bne.n	8001558 <HAL_SPI_Transmit+0xa4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001548:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800154a:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800154c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800154e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001550:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001552:	3b01      	subs	r3, #1
 8001554:	b29b      	uxth	r3, r3
 8001556:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001558:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 800155a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800155c:	2b00      	cmp	r3, #0
 800155e:	d116      	bne.n	800158e <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001560:	9a02      	ldr	r2, [sp, #8]
 8001562:	9901      	ldr	r1, [sp, #4]
 8001564:	0020      	movs	r0, r4
 8001566:	f7ff ff23 	bl	80013b0 <SPI_EndRxTxTransaction>
 800156a:	2800      	cmp	r0, #0
 800156c:	d000      	beq.n	8001570 <HAL_SPI_Transmit+0xbc>
 800156e:	e06d      	b.n	800164c <HAL_SPI_Transmit+0x198>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001570:	68a3      	ldr	r3, [r4, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <HAL_SPI_Transmit+0xd0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001576:	9305      	str	r3, [sp, #20]
 8001578:	6823      	ldr	r3, [r4, #0]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	9205      	str	r2, [sp, #20]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	9305      	str	r3, [sp, #20]
 8001582:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001584:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8001586:	1e73      	subs	r3, r6, #1
 8001588:	419e      	sbcs	r6, r3
    errorcode = HAL_BUSY;
 800158a:	b2f6      	uxtb	r6, r6
 800158c:	e017      	b.n	80015be <HAL_SPI_Transmit+0x10a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800158e:	6822      	ldr	r2, [r4, #0]
 8001590:	6893      	ldr	r3, [r2, #8]
 8001592:	422b      	tst	r3, r5
 8001594:	d009      	beq.n	80015aa <HAL_SPI_Transmit+0xf6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001596:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001598:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800159a:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800159c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800159e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80015a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015a2:	3b01      	subs	r3, #1
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80015a8:	e7d7      	b.n	800155a <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80015aa:	f7fe fe95 	bl	80002d8 <HAL_GetTick>
 80015ae:	9b02      	ldr	r3, [sp, #8]
 80015b0:	1ac0      	subs	r0, r0, r3
 80015b2:	9b01      	ldr	r3, [sp, #4]
 80015b4:	4298      	cmp	r0, r3
 80015b6:	d3d0      	bcc.n	800155a <HAL_SPI_Transmit+0xa6>
 80015b8:	3301      	adds	r3, #1
 80015ba:	d0ce      	beq.n	800155a <HAL_SPI_Transmit+0xa6>
          errorcode = HAL_TIMEOUT;
 80015bc:	2603      	movs	r6, #3
  hspi->State = HAL_SPI_STATE_READY;
 80015be:	2301      	movs	r3, #1
 80015c0:	345d      	adds	r4, #93	; 0x5d
 80015c2:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 80015c4:	2300      	movs	r3, #0
 80015c6:	9a03      	ldr	r2, [sp, #12]
 80015c8:	7013      	strb	r3, [r2, #0]
}
 80015ca:	0030      	movs	r0, r6
 80015cc:	b007      	add	sp, #28
 80015ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80015d0:	2a00      	cmp	r2, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_SPI_Transmit+0x124>
 80015d4:	2f01      	cmp	r7, #1
 80015d6:	d10a      	bne.n	80015ee <HAL_SPI_Transmit+0x13a>
      if (hspi->TxXferCount > 1U)
 80015d8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80015da:	2a01      	cmp	r2, #1
 80015dc:	d91c      	bls.n	8001618 <HAL_SPI_Transmit+0x164>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015de:	882a      	ldrh	r2, [r5, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80015e0:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015e2:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 80015e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80015e6:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80015e8:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80015ee:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 80015f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0b4      	beq.n	8001560 <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80015f6:	6822      	ldr	r2, [r4, #0]
 80015f8:	6893      	ldr	r3, [r2, #8]
 80015fa:	422b      	tst	r3, r5
 80015fc:	d01c      	beq.n	8001638 <HAL_SPI_Transmit+0x184>
        if (hspi->TxXferCount > 1U)
 80015fe:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8001600:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001602:	2901      	cmp	r1, #1
 8001604:	d910      	bls.n	8001628 <HAL_SPI_Transmit+0x174>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001606:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001608:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800160a:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800160c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800160e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001610:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8001612:	b29b      	uxth	r3, r3
 8001614:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001616:	e7eb      	b.n	80015f0 <HAL_SPI_Transmit+0x13c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001618:	782a      	ldrb	r2, [r5, #0]
 800161a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 800161c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800161e:	3301      	adds	r3, #1
 8001620:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001622:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001624:	3b01      	subs	r3, #1
 8001626:	e7e0      	b.n	80015ea <HAL_SPI_Transmit+0x136>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800162c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800162e:	3301      	adds	r3, #1
 8001630:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8001632:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001634:	3b01      	subs	r3, #1
 8001636:	e7ec      	b.n	8001612 <HAL_SPI_Transmit+0x15e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001638:	f7fe fe4e 	bl	80002d8 <HAL_GetTick>
 800163c:	9b02      	ldr	r3, [sp, #8]
 800163e:	1ac0      	subs	r0, r0, r3
 8001640:	9b01      	ldr	r3, [sp, #4]
 8001642:	4283      	cmp	r3, r0
 8001644:	d8d4      	bhi.n	80015f0 <HAL_SPI_Transmit+0x13c>
 8001646:	3301      	adds	r3, #1
 8001648:	d0d2      	beq.n	80015f0 <HAL_SPI_Transmit+0x13c>
 800164a:	e7b7      	b.n	80015bc <HAL_SPI_Transmit+0x108>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800164c:	2320      	movs	r3, #32
 800164e:	6623      	str	r3, [r4, #96]	; 0x60
 8001650:	e78e      	b.n	8001570 <HAL_SPI_Transmit+0xbc>
	...

08001654 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001654:	6803      	ldr	r3, [r0, #0]
 8001656:	4907      	ldr	r1, [pc, #28]	; (8001674 <UART_EndRxTransfer+0x20>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	400a      	ands	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	3123      	adds	r1, #35	; 0x23
 8001662:	31ff      	adds	r1, #255	; 0xff
 8001664:	438a      	bics	r2, r1
 8001666:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001668:	2320      	movs	r3, #32
 800166a:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800166c:	2300      	movs	r3, #0
 800166e:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001670:	4770      	bx	lr
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	fffffedf 	.word	0xfffffedf

08001678 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001678:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800167a:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800167c:	2b21      	cmp	r3, #33	; 0x21
 800167e:	d10d      	bne.n	800169c <UART_TxISR_16BIT+0x24>
  {
    if (huart->TxXferCount == 0U)
 8001680:	0001      	movs	r1, r0
 8001682:	3152      	adds	r1, #82	; 0x52
 8001684:	880a      	ldrh	r2, [r1, #0]
 8001686:	6803      	ldr	r3, [r0, #0]
 8001688:	2a00      	cmp	r2, #0
 800168a:	d108      	bne.n	800169e <UART_TxISR_16BIT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800168c:	2180      	movs	r1, #128	; 0x80
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	438a      	bics	r2, r1
 8001692:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001694:	2240      	movs	r2, #64	; 0x40
 8001696:	6819      	ldr	r1, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800169c:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800169e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80016a0:	8822      	ldrh	r2, [r4, #0]
      huart->pTxBuffPtr += 2U;
 80016a2:	3402      	adds	r4, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80016a4:	05d2      	lsls	r2, r2, #23
 80016a6:	0dd2      	lsrs	r2, r2, #23
 80016a8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80016aa:	64c4      	str	r4, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80016ac:	880b      	ldrh	r3, [r1, #0]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	800b      	strh	r3, [r1, #0]
}
 80016b4:	e7f2      	b.n	800169c <UART_TxISR_16BIT+0x24>

080016b6 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80016b6:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 80016b8:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80016ba:	2b21      	cmp	r3, #33	; 0x21
 80016bc:	d10d      	bne.n	80016da <UART_TxISR_8BIT+0x24>
    if (huart->TxXferCount == 0U)
 80016be:	0001      	movs	r1, r0
 80016c0:	3152      	adds	r1, #82	; 0x52
 80016c2:	880a      	ldrh	r2, [r1, #0]
 80016c4:	6803      	ldr	r3, [r0, #0]
 80016c6:	2a00      	cmp	r2, #0
 80016c8:	d108      	bne.n	80016dc <UART_TxISR_8BIT+0x26>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	438a      	bics	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80016d2:	2240      	movs	r2, #64	; 0x40
 80016d4:	6819      	ldr	r1, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]
}
 80016da:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80016dc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80016de:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 80016e0:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80016e2:	851c      	strh	r4, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80016e4:	64c2      	str	r2, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80016e6:	880b      	ldrh	r3, [r1, #0]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	800b      	strh	r3, [r1, #0]
}
 80016ee:	e7f4      	b.n	80016da <UART_TxISR_8BIT+0x24>

080016f0 <HAL_UART_Transmit_IT>:
{
 80016f0:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80016f2:	6f44      	ldr	r4, [r0, #116]	; 0x74
{
 80016f4:	0003      	movs	r3, r0
    return HAL_BUSY;
 80016f6:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80016f8:	2c20      	cmp	r4, #32
 80016fa:	d130      	bne.n	800175e <HAL_UART_Transmit_IT+0x6e>
      return HAL_ERROR;
 80016fc:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80016fe:	2900      	cmp	r1, #0
 8001700:	d02d      	beq.n	800175e <HAL_UART_Transmit_IT+0x6e>
 8001702:	2a00      	cmp	r2, #0
 8001704:	d02b      	beq.n	800175e <HAL_UART_Transmit_IT+0x6e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001706:	2480      	movs	r4, #128	; 0x80
 8001708:	689d      	ldr	r5, [r3, #8]
 800170a:	0164      	lsls	r4, r4, #5
 800170c:	42a5      	cmp	r5, r4
 800170e:	d104      	bne.n	800171a <HAL_UART_Transmit_IT+0x2a>
 8001710:	691c      	ldr	r4, [r3, #16]
 8001712:	2c00      	cmp	r4, #0
 8001714:	d101      	bne.n	800171a <HAL_UART_Transmit_IT+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001716:	4201      	tst	r1, r0
 8001718:	d121      	bne.n	800175e <HAL_UART_Transmit_IT+0x6e>
    __HAL_LOCK(huart);
 800171a:	001c      	movs	r4, r3
 800171c:	3470      	adds	r4, #112	; 0x70
 800171e:	7826      	ldrb	r6, [r4, #0]
    return HAL_BUSY;
 8001720:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8001722:	2e01      	cmp	r6, #1
 8001724:	d01b      	beq.n	800175e <HAL_UART_Transmit_IT+0x6e>
 8001726:	3801      	subs	r0, #1
 8001728:	7020      	strb	r0, [r4, #0]
    huart->pTxBuffPtr  = pData;
 800172a:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800172c:	0019      	movs	r1, r3
 800172e:	3150      	adds	r1, #80	; 0x50
 8001730:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 8001732:	804a      	strh	r2, [r1, #2]
    huart->TxISR       = NULL;
 8001734:	2200      	movs	r2, #0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001736:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->TxISR       = NULL;
 8001738:	665a      	str	r2, [r3, #100]	; 0x64
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800173a:	3221      	adds	r2, #33	; 0x21
 800173c:	675a      	str	r2, [r3, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800173e:	2280      	movs	r2, #128	; 0x80
 8001740:	0152      	lsls	r2, r2, #5
 8001742:	4295      	cmp	r5, r2
 8001744:	d10c      	bne.n	8001760 <HAL_UART_Transmit_IT+0x70>
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	2a00      	cmp	r2, #0
 800174a:	d109      	bne.n	8001760 <HAL_UART_Transmit_IT+0x70>
      huart->TxISR = UART_TxISR_16BIT;
 800174c:	4a05      	ldr	r2, [pc, #20]	; (8001764 <HAL_UART_Transmit_IT+0x74>)
      huart->TxISR = UART_TxISR_8BIT;
 800174e:	665a      	str	r2, [r3, #100]	; 0x64
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	2380      	movs	r3, #128	; 0x80
    __HAL_UNLOCK(huart);
 8001754:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001756:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 8001758:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800175a:	430b      	orrs	r3, r1
 800175c:	6013      	str	r3, [r2, #0]
}
 800175e:	bd70      	pop	{r4, r5, r6, pc}
      huart->TxISR = UART_TxISR_8BIT;
 8001760:	4a01      	ldr	r2, [pc, #4]	; (8001768 <HAL_UART_Transmit_IT+0x78>)
 8001762:	e7f4      	b.n	800174e <HAL_UART_Transmit_IT+0x5e>
 8001764:	08001679 	.word	0x08001679
 8001768:	080016b7 	.word	0x080016b7

0800176c <HAL_UART_Receive_IT>:
{
 800176c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800176e:	6f84      	ldr	r4, [r0, #120]	; 0x78
{
 8001770:	0003      	movs	r3, r0
    return HAL_BUSY;
 8001772:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001774:	2c20      	cmp	r4, #32
 8001776:	d141      	bne.n	80017fc <HAL_UART_Receive_IT+0x90>
      return HAL_ERROR;
 8001778:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800177a:	2900      	cmp	r1, #0
 800177c:	d03e      	beq.n	80017fc <HAL_UART_Receive_IT+0x90>
 800177e:	2a00      	cmp	r2, #0
 8001780:	d03c      	beq.n	80017fc <HAL_UART_Receive_IT+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001782:	2580      	movs	r5, #128	; 0x80
 8001784:	689c      	ldr	r4, [r3, #8]
 8001786:	016d      	lsls	r5, r5, #5
 8001788:	42ac      	cmp	r4, r5
 800178a:	d104      	bne.n	8001796 <HAL_UART_Receive_IT+0x2a>
 800178c:	691d      	ldr	r5, [r3, #16]
 800178e:	2d00      	cmp	r5, #0
 8001790:	d101      	bne.n	8001796 <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8001792:	4201      	tst	r1, r0
 8001794:	d132      	bne.n	80017fc <HAL_UART_Receive_IT+0x90>
    __HAL_LOCK(huart);
 8001796:	001d      	movs	r5, r3
 8001798:	3570      	adds	r5, #112	; 0x70
 800179a:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 800179c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800179e:	2e01      	cmp	r6, #1
 80017a0:	d02c      	beq.n	80017fc <HAL_UART_Receive_IT+0x90>
 80017a2:	3801      	subs	r0, #1
 80017a4:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 80017a6:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80017a8:	0019      	movs	r1, r3
 80017aa:	3158      	adds	r1, #88	; 0x58
 80017ac:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 80017ae:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 80017b0:	2080      	movs	r0, #128	; 0x80
    huart->RxISR       = NULL;
 80017b2:	2100      	movs	r1, #0
 80017b4:	001a      	movs	r2, r3
 80017b6:	6619      	str	r1, [r3, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 80017b8:	0140      	lsls	r0, r0, #5
 80017ba:	325c      	adds	r2, #92	; 0x5c
 80017bc:	4284      	cmp	r4, r0
 80017be:	d120      	bne.n	8001802 <HAL_UART_Receive_IT+0x96>
 80017c0:	6919      	ldr	r1, [r3, #16]
 80017c2:	2900      	cmp	r1, #0
 80017c4:	d11b      	bne.n	80017fe <HAL_UART_Receive_IT+0x92>
 80017c6:	4913      	ldr	r1, [pc, #76]	; (8001814 <HAL_UART_Receive_IT+0xa8>)
 80017c8:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017ca:	2200      	movs	r2, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017cc:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017ce:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80017d0:	3222      	adds	r2, #34	; 0x22
 80017d2:	679a      	str	r2, [r3, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	6890      	ldr	r0, [r2, #8]
 80017d8:	4301      	orrs	r1, r0
 80017da:	6091      	str	r1, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017dc:	2180      	movs	r1, #128	; 0x80
 80017de:	0149      	lsls	r1, r1, #5
 80017e0:	428c      	cmp	r4, r1
 80017e2:	d115      	bne.n	8001810 <HAL_UART_Receive_IT+0xa4>
 80017e4:	6919      	ldr	r1, [r3, #16]
 80017e6:	2900      	cmp	r1, #0
 80017e8:	d112      	bne.n	8001810 <HAL_UART_Receive_IT+0xa4>
      huart->RxISR = UART_RxISR_16BIT;
 80017ea:	490b      	ldr	r1, [pc, #44]	; (8001818 <HAL_UART_Receive_IT+0xac>)
      huart->RxISR = UART_RxISR_8BIT;
 80017ec:	6619      	str	r1, [r3, #96]	; 0x60
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80017ee:	2390      	movs	r3, #144	; 0x90
    __HAL_UNLOCK(huart);
 80017f0:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80017f2:	6811      	ldr	r1, [r2, #0]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	430b      	orrs	r3, r1
    __HAL_UNLOCK(huart);
 80017f8:	7028      	strb	r0, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bd70      	pop	{r4, r5, r6, pc}
    UART_MASK_COMPUTATION(huart);
 80017fe:	21ff      	movs	r1, #255	; 0xff
 8001800:	e7e2      	b.n	80017c8 <HAL_UART_Receive_IT+0x5c>
 8001802:	2c00      	cmp	r4, #0
 8001804:	d1e0      	bne.n	80017c8 <HAL_UART_Receive_IT+0x5c>
 8001806:	6919      	ldr	r1, [r3, #16]
 8001808:	2900      	cmp	r1, #0
 800180a:	d0f8      	beq.n	80017fe <HAL_UART_Receive_IT+0x92>
 800180c:	217f      	movs	r1, #127	; 0x7f
 800180e:	e7db      	b.n	80017c8 <HAL_UART_Receive_IT+0x5c>
      huart->RxISR = UART_RxISR_8BIT;
 8001810:	4902      	ldr	r1, [pc, #8]	; (800181c <HAL_UART_Receive_IT+0xb0>)
 8001812:	e7eb      	b.n	80017ec <HAL_UART_Receive_IT+0x80>
 8001814:	000001ff 	.word	0x000001ff
 8001818:	08001885 	.word	0x08001885
 800181c:	08001825 	.word	0x08001825

08001820 <HAL_UART_TxCpltCallback>:
 8001820:	4770      	bx	lr
	...

08001824 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001824:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8001826:	b510      	push	{r4, lr}
 8001828:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800182a:	2a22      	cmp	r2, #34	; 0x22
 800182c:	d123      	bne.n	8001876 <UART_RxISR_8BIT+0x52>
  uint16_t uhMask = huart->Mask;
 800182e:	0002      	movs	r2, r0
 8001830:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001832:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001834:	8812      	ldrh	r2, [r2, #0]
 8001836:	4013      	ands	r3, r2
 8001838:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800183a:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 800183c:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 800183e:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001840:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8001842:	3301      	adds	r3, #1
 8001844:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001846:	8813      	ldrh	r3, [r2, #0]
 8001848:	3b01      	subs	r3, #1
 800184a:	b29b      	uxth	r3, r3
 800184c:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 800184e:	8813      	ldrh	r3, [r2, #0]
 8001850:	b29b      	uxth	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10e      	bne.n	8001874 <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001856:	6802      	ldr	r2, [r0, #0]
 8001858:	4c09      	ldr	r4, [pc, #36]	; (8001880 <UART_RxISR_8BIT+0x5c>)
 800185a:	6811      	ldr	r1, [r2, #0]
 800185c:	4021      	ands	r1, r4
 800185e:	6011      	str	r1, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001860:	6891      	ldr	r1, [r2, #8]
 8001862:	3423      	adds	r4, #35	; 0x23
 8001864:	34ff      	adds	r4, #255	; 0xff
 8001866:	43a1      	bics	r1, r4
 8001868:	6091      	str	r1, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800186a:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800186c:	6603      	str	r3, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 800186e:	6782      	str	r2, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001870:	f000 fab4 	bl	8001ddc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001874:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001876:	2208      	movs	r2, #8
 8001878:	6999      	ldr	r1, [r3, #24]
 800187a:	430a      	orrs	r2, r1
 800187c:	619a      	str	r2, [r3, #24]
}
 800187e:	e7f9      	b.n	8001874 <UART_RxISR_8BIT+0x50>
 8001880:	fffffedf 	.word	0xfffffedf

08001884 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001884:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8001886:	b510      	push	{r4, lr}
 8001888:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800188a:	2a22      	cmp	r2, #34	; 0x22
 800188c:	d121      	bne.n	80018d2 <UART_RxISR_16BIT+0x4e>
  uint16_t uhMask = huart->Mask;
 800188e:	0001      	movs	r1, r0
 8001890:	315c      	adds	r1, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001892:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8001894:	8809      	ldrh	r1, [r1, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8001896:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8001898:	4021      	ands	r1, r4
 800189a:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 800189c:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 800189e:	3202      	adds	r2, #2
 80018a0:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80018a2:	315a      	adds	r1, #90	; 0x5a
 80018a4:	880a      	ldrh	r2, [r1, #0]
 80018a6:	3a01      	subs	r2, #1
 80018a8:	b292      	uxth	r2, r2
 80018aa:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 80018ac:	880a      	ldrh	r2, [r1, #0]
 80018ae:	b292      	uxth	r2, r2
 80018b0:	2a00      	cmp	r2, #0
 80018b2:	d10d      	bne.n	80018d0 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80018b4:	6819      	ldr	r1, [r3, #0]
 80018b6:	4c09      	ldr	r4, [pc, #36]	; (80018dc <UART_RxISR_16BIT+0x58>)
 80018b8:	4021      	ands	r1, r4
 80018ba:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018bc:	6899      	ldr	r1, [r3, #8]
 80018be:	3423      	adds	r4, #35	; 0x23
 80018c0:	34ff      	adds	r4, #255	; 0xff
 80018c2:	43a1      	bics	r1, r4
 80018c4:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80018c6:	2320      	movs	r3, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80018c8:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 80018ca:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80018cc:	f000 fa86 	bl	8001ddc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80018d0:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80018d2:	2208      	movs	r2, #8
 80018d4:	6999      	ldr	r1, [r3, #24]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	619a      	str	r2, [r3, #24]
}
 80018da:	e7f9      	b.n	80018d0 <UART_RxISR_16BIT+0x4c>
 80018dc:	fffffedf 	.word	0xfffffedf

080018e0 <HAL_UART_ErrorCallback>:
 80018e0:	4770      	bx	lr
	...

080018e4 <HAL_UART_IRQHandler>:
{
 80018e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80018e6:	6803      	ldr	r3, [r0, #0]
{
 80018e8:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80018ea:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80018ec:	4850      	ldr	r0, [pc, #320]	; (8001a30 <HAL_UART_IRQHandler+0x14c>)
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80018ee:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80018f0:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 80018f2:	4202      	tst	r2, r0
 80018f4:	d10b      	bne.n	800190e <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80018f6:	2020      	movs	r0, #32
 80018f8:	4202      	tst	r2, r0
 80018fa:	d100      	bne.n	80018fe <HAL_UART_IRQHandler+0x1a>
 80018fc:	e076      	b.n	80019ec <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80018fe:	4201      	tst	r1, r0
 8001900:	d100      	bne.n	8001904 <HAL_UART_IRQHandler+0x20>
 8001902:	e073      	b.n	80019ec <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8001904:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 8001906:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8001908:	2b00      	cmp	r3, #0
 800190a:	d165      	bne.n	80019d8 <HAL_UART_IRQHandler+0xf4>
 800190c:	e065      	b.n	80019da <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800190e:	2001      	movs	r0, #1
 8001910:	0035      	movs	r5, r6
 8001912:	4005      	ands	r5, r0
 8001914:	d103      	bne.n	800191e <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001916:	2790      	movs	r7, #144	; 0x90
 8001918:	007f      	lsls	r7, r7, #1
 800191a:	4239      	tst	r1, r7
 800191c:	d066      	beq.n	80019ec <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800191e:	4202      	tst	r2, r0
 8001920:	d005      	beq.n	800192e <HAL_UART_IRQHandler+0x4a>
 8001922:	05ce      	lsls	r6, r1, #23
 8001924:	d503      	bpl.n	800192e <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001926:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001928:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 800192a:	4330      	orrs	r0, r6
 800192c:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800192e:	2002      	movs	r0, #2
 8001930:	4202      	tst	r2, r0
 8001932:	d006      	beq.n	8001942 <HAL_UART_IRQHandler+0x5e>
 8001934:	2d00      	cmp	r5, #0
 8001936:	d004      	beq.n	8001942 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001938:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800193a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 800193c:	1800      	adds	r0, r0, r0
 800193e:	4330      	orrs	r0, r6
 8001940:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001942:	2004      	movs	r0, #4
 8001944:	4202      	tst	r2, r0
 8001946:	d006      	beq.n	8001956 <HAL_UART_IRQHandler+0x72>
 8001948:	2d00      	cmp	r5, #0
 800194a:	d004      	beq.n	8001956 <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800194c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800194e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001950:	3802      	subs	r0, #2
 8001952:	4330      	orrs	r0, r6
 8001954:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001956:	0710      	lsls	r0, r2, #28
 8001958:	d508      	bpl.n	800196c <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800195a:	0688      	lsls	r0, r1, #26
 800195c:	d401      	bmi.n	8001962 <HAL_UART_IRQHandler+0x7e>
 800195e:	2d00      	cmp	r5, #0
 8001960:	d004      	beq.n	800196c <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001962:	2008      	movs	r0, #8
 8001964:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001966:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8001968:	4328      	orrs	r0, r5
 800196a:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800196c:	2080      	movs	r0, #128	; 0x80
 800196e:	0100      	lsls	r0, r0, #4
 8001970:	4202      	tst	r2, r0
 8001972:	d006      	beq.n	8001982 <HAL_UART_IRQHandler+0x9e>
 8001974:	014d      	lsls	r5, r1, #5
 8001976:	d504      	bpl.n	8001982 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001978:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800197a:	2320      	movs	r3, #32
 800197c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800197e:	4303      	orrs	r3, r0
 8001980:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001982:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001984:	2b00      	cmp	r3, #0
 8001986:	d028      	beq.n	80019da <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001988:	2320      	movs	r3, #32
 800198a:	421a      	tst	r2, r3
 800198c:	d006      	beq.n	800199c <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800198e:	4219      	tst	r1, r3
 8001990:	d004      	beq.n	800199c <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8001992:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8001998:	0020      	movs	r0, r4
 800199a:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800199c:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800199e:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80019a0:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 80019a2:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80019a4:	065b      	lsls	r3, r3, #25
 80019a6:	d402      	bmi.n	80019ae <HAL_UART_IRQHandler+0xca>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80019a8:	2328      	movs	r3, #40	; 0x28
 80019aa:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80019ac:	d01a      	beq.n	80019e4 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 80019ae:	f7ff fe51 	bl	8001654 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019b2:	2140      	movs	r1, #64	; 0x40
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	420a      	tst	r2, r1
 80019ba:	d00f      	beq.n	80019dc <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019bc:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80019be:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019c0:	438a      	bics	r2, r1
 80019c2:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80019c4:	2800      	cmp	r0, #0
 80019c6:	d009      	beq.n	80019dc <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80019c8:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <HAL_UART_IRQHandler+0x150>)
 80019ca:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80019cc:	f7fe fd24 	bl	8000418 <HAL_DMA_Abort_IT>
 80019d0:	2800      	cmp	r0, #0
 80019d2:	d002      	beq.n	80019da <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80019d4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80019d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80019d8:	4798      	blx	r3
}
 80019da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80019dc:	0020      	movs	r0, r4
 80019de:	f7ff ff7f 	bl	80018e0 <HAL_UART_ErrorCallback>
 80019e2:	e7fa      	b.n	80019da <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 80019e4:	f7ff ff7c 	bl	80018e0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019e8:	67e5      	str	r5, [r4, #124]	; 0x7c
 80019ea:	e7f6      	b.n	80019da <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80019ec:	2080      	movs	r0, #128	; 0x80
 80019ee:	0340      	lsls	r0, r0, #13
 80019f0:	4202      	tst	r2, r0
 80019f2:	d006      	beq.n	8001a02 <HAL_UART_IRQHandler+0x11e>
 80019f4:	0275      	lsls	r5, r6, #9
 80019f6:	d504      	bpl.n	8001a02 <HAL_UART_IRQHandler+0x11e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80019f8:	6218      	str	r0, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80019fa:	0020      	movs	r0, r4
 80019fc:	f000 f9e0 	bl	8001dc0 <HAL_UARTEx_WakeupCallback>
    return;
 8001a00:	e7eb      	b.n	80019da <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001a02:	2080      	movs	r0, #128	; 0x80
 8001a04:	4202      	tst	r2, r0
 8001a06:	d003      	beq.n	8001a10 <HAL_UART_IRQHandler+0x12c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001a08:	4201      	tst	r1, r0
 8001a0a:	d001      	beq.n	8001a10 <HAL_UART_IRQHandler+0x12c>
    if (huart->TxISR != NULL)
 8001a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a0e:	e77a      	b.n	8001906 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001a10:	2040      	movs	r0, #64	; 0x40
 8001a12:	4202      	tst	r2, r0
 8001a14:	d0e1      	beq.n	80019da <HAL_UART_IRQHandler+0xf6>
 8001a16:	4201      	tst	r1, r0
 8001a18:	d0df      	beq.n	80019da <HAL_UART_IRQHandler+0xf6>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4382      	bics	r2, r0
 8001a1e:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8001a20:	2320      	movs	r3, #32
 8001a22:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8001a24:	2300      	movs	r3, #0
  HAL_UART_TxCpltCallback(huart);
 8001a26:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8001a28:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8001a2a:	f7ff fef9 	bl	8001820 <HAL_UART_TxCpltCallback>
 8001a2e:	e7d4      	b.n	80019da <HAL_UART_IRQHandler+0xf6>
 8001a30:	0000080f 	.word	0x0000080f
 8001a34:	08001a39 	.word	0x08001a39

08001a38 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001a38:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	0002      	movs	r2, r0
{
 8001a3e:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001a40:	325a      	adds	r2, #90	; 0x5a
 8001a42:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8001a44:	3a08      	subs	r2, #8
 8001a46:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8001a48:	f7ff ff4a 	bl	80018e0 <HAL_UART_ErrorCallback>
}
 8001a4c:	bd10      	pop	{r4, pc}
	...

08001a50 <UART_SetConfig>:
{
 8001a50:	b570      	push	{r4, r5, r6, lr}
 8001a52:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a54:	6925      	ldr	r5, [r4, #16]
 8001a56:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a58:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a5a:	432b      	orrs	r3, r5
 8001a5c:	6965      	ldr	r5, [r4, #20]
 8001a5e:	69c1      	ldr	r1, [r0, #28]
 8001a60:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a62:	6810      	ldr	r0, [r2, #0]
 8001a64:	4d43      	ldr	r5, [pc, #268]	; (8001b74 <UART_SetConfig+0x124>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a66:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a68:	4028      	ands	r0, r5
 8001a6a:	4303      	orrs	r3, r0
 8001a6c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a6e:	6853      	ldr	r3, [r2, #4]
 8001a70:	4841      	ldr	r0, [pc, #260]	; (8001b78 <UART_SetConfig+0x128>)
  tmpreg |= huart->Init.OneBitSampling;
 8001a72:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a74:	4003      	ands	r3, r0
 8001a76:	68e0      	ldr	r0, [r4, #12]
 8001a78:	4303      	orrs	r3, r0
 8001a7a:	6053      	str	r3, [r2, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8001a7c:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001a7e:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001a80:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001a82:	4d3e      	ldr	r5, [pc, #248]	; (8001b7c <UART_SetConfig+0x12c>)
 8001a84:	4028      	ands	r0, r5
 8001a86:	4303      	orrs	r3, r0
 8001a88:	6093      	str	r3, [r2, #8]
 8001a8a:	2380      	movs	r3, #128	; 0x80
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a8c:	483c      	ldr	r0, [pc, #240]	; (8001b80 <UART_SetConfig+0x130>)
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	4282      	cmp	r2, r0
 8001a92:	d110      	bne.n	8001ab6 <UART_SetConfig+0x66>
 8001a94:	2003      	movs	r0, #3
 8001a96:	4a3b      	ldr	r2, [pc, #236]	; (8001b84 <UART_SetConfig+0x134>)
 8001a98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a9a:	4002      	ands	r2, r0
 8001a9c:	483a      	ldr	r0, [pc, #232]	; (8001b88 <UART_SetConfig+0x138>)
 8001a9e:	5c80      	ldrb	r0, [r0, r2]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001aa0:	4299      	cmp	r1, r3
 8001aa2:	d013      	beq.n	8001acc <UART_SetConfig+0x7c>
    switch (clocksource)
 8001aa4:	2808      	cmp	r0, #8
 8001aa6:	d828      	bhi.n	8001afa <UART_SetConfig+0xaa>
 8001aa8:	f7fe fb40 	bl	800012c <__gnu_thumb1_case_uqi>
 8001aac:	27462741 	.word	0x27462741
 8001ab0:	27272757 	.word	0x27272757
 8001ab4:	5a          	.byte	0x5a
 8001ab5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ab6:	4835      	ldr	r0, [pc, #212]	; (8001b8c <UART_SetConfig+0x13c>)
 8001ab8:	4282      	cmp	r2, r0
 8001aba:	d156      	bne.n	8001b6a <UART_SetConfig+0x11a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001abc:	4299      	cmp	r1, r3
 8001abe:	d136      	bne.n	8001b2e <UART_SetConfig+0xde>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ac0:	f7ff fb7c 	bl	80011bc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001ac4:	6863      	ldr	r3, [r4, #4]
 8001ac6:	0040      	lsls	r0, r0, #1
 8001ac8:	085b      	lsrs	r3, r3, #1
 8001aca:	e00b      	b.n	8001ae4 <UART_SetConfig+0x94>
    switch (clocksource)
 8001acc:	2808      	cmp	r0, #8
 8001ace:	d81e      	bhi.n	8001b0e <UART_SetConfig+0xbe>
 8001ad0:	f7fe fb22 	bl	8000118 <__gnu_thumb1_case_sqi>
 8001ad4:	1d051df6 	.word	0x1d051df6
 8001ad8:	1d1d1d15 	.word	0x1d1d1d15
 8001adc:	18          	.byte	0x18
 8001add:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001ade:	6863      	ldr	r3, [r4, #4]
 8001ae0:	0858      	lsrs	r0, r3, #1
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <UART_SetConfig+0x140>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ae4:	18c0      	adds	r0, r0, r3
 8001ae6:	6861      	ldr	r1, [r4, #4]
 8001ae8:	f7fe fb2a 	bl	8000140 <__udivsi3>
 8001aec:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001aee:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001af0:	001a      	movs	r2, r3
 8001af2:	4928      	ldr	r1, [pc, #160]	; (8001b94 <UART_SetConfig+0x144>)
 8001af4:	3a10      	subs	r2, #16
 8001af6:	428a      	cmp	r2, r1
 8001af8:	d90c      	bls.n	8001b14 <UART_SetConfig+0xc4>
      ret = HAL_ERROR;
 8001afa:	2001      	movs	r0, #1
 8001afc:	e013      	b.n	8001b26 <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 8001afe:	f7ff faa7 	bl	8001050 <HAL_RCC_GetSysClockFreq>
 8001b02:	e7df      	b.n	8001ac4 <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001b04:	6863      	ldr	r3, [r4, #4]
 8001b06:	0858      	lsrs	r0, r3, #1
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	025b      	lsls	r3, r3, #9
 8001b0c:	e7ea      	b.n	8001ae4 <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 8001b0e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e7ed      	b.n	8001af0 <UART_SetConfig+0xa0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001b14:	220f      	movs	r2, #15
 8001b16:	0019      	movs	r1, r3
 8001b18:	4391      	bics	r1, r2
 8001b1a:	000a      	movs	r2, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b1c:	071b      	lsls	r3, r3, #28
      huart->Instance->BRR = brrtemp;
 8001b1e:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b20:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60cb      	str	r3, [r1, #12]
  huart->RxISR = NULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001b2a:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001b2c:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b2e:	f7ff fb45 	bl	80011bc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001b32:	6863      	ldr	r3, [r4, #4]
 8001b34:	085b      	lsrs	r3, r3, #1
 8001b36:	e002      	b.n	8001b3e <UART_SetConfig+0xee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001b38:	6863      	ldr	r3, [r4, #4]
 8001b3a:	0858      	lsrs	r0, r3, #1
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <UART_SetConfig+0x148>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001b3e:	18c0      	adds	r0, r0, r3
 8001b40:	6861      	ldr	r1, [r4, #4]
 8001b42:	f7fe fafd 	bl	8000140 <__udivsi3>
 8001b46:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b48:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b4a:	001a      	movs	r2, r3
 8001b4c:	4911      	ldr	r1, [pc, #68]	; (8001b94 <UART_SetConfig+0x144>)
 8001b4e:	3a10      	subs	r2, #16
 8001b50:	428a      	cmp	r2, r1
 8001b52:	d8d2      	bhi.n	8001afa <UART_SetConfig+0xaa>
      huart->Instance->BRR = usartdiv;
 8001b54:	6822      	ldr	r2, [r4, #0]
 8001b56:	60d3      	str	r3, [r2, #12]
 8001b58:	e7e5      	b.n	8001b26 <UART_SetConfig+0xd6>
        pclk = HAL_RCC_GetSysClockFreq();
 8001b5a:	f7ff fa79 	bl	8001050 <HAL_RCC_GetSysClockFreq>
 8001b5e:	e7e8      	b.n	8001b32 <UART_SetConfig+0xe2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001b60:	6863      	ldr	r3, [r4, #4]
 8001b62:	0858      	lsrs	r0, r3, #1
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	e7e9      	b.n	8001b3e <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b6a:	4299      	cmp	r1, r3
 8001b6c:	d0cf      	beq.n	8001b0e <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 8001b6e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e7ea      	b.n	8001b4a <UART_SetConfig+0xfa>
 8001b74:	ffff69f3 	.word	0xffff69f3
 8001b78:	ffffcfff 	.word	0xffffcfff
 8001b7c:	fffff4ff 	.word	0xfffff4ff
 8001b80:	40013800 	.word	0x40013800
 8001b84:	40021000 	.word	0x40021000
 8001b88:	080027d8 	.word	0x080027d8
 8001b8c:	40004400 	.word	0x40004400
 8001b90:	00f42400 	.word	0x00f42400
 8001b94:	0000ffef 	.word	0x0000ffef
 8001b98:	007a1200 	.word	0x007a1200

08001b9c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001b9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001b9e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ba0:	07da      	lsls	r2, r3, #31
 8001ba2:	d506      	bpl.n	8001bb2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ba4:	6801      	ldr	r1, [r0, #0]
 8001ba6:	4c28      	ldr	r4, [pc, #160]	; (8001c48 <UART_AdvFeatureConfig+0xac>)
 8001ba8:	684a      	ldr	r2, [r1, #4]
 8001baa:	4022      	ands	r2, r4
 8001bac:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001bae:	4322      	orrs	r2, r4
 8001bb0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001bb2:	079a      	lsls	r2, r3, #30
 8001bb4:	d506      	bpl.n	8001bc4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001bb6:	6801      	ldr	r1, [r0, #0]
 8001bb8:	4c24      	ldr	r4, [pc, #144]	; (8001c4c <UART_AdvFeatureConfig+0xb0>)
 8001bba:	684a      	ldr	r2, [r1, #4]
 8001bbc:	4022      	ands	r2, r4
 8001bbe:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001bc0:	4322      	orrs	r2, r4
 8001bc2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001bc4:	075a      	lsls	r2, r3, #29
 8001bc6:	d506      	bpl.n	8001bd6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001bc8:	6801      	ldr	r1, [r0, #0]
 8001bca:	4c21      	ldr	r4, [pc, #132]	; (8001c50 <UART_AdvFeatureConfig+0xb4>)
 8001bcc:	684a      	ldr	r2, [r1, #4]
 8001bce:	4022      	ands	r2, r4
 8001bd0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001bd2:	4322      	orrs	r2, r4
 8001bd4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001bd6:	071a      	lsls	r2, r3, #28
 8001bd8:	d506      	bpl.n	8001be8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001bda:	6801      	ldr	r1, [r0, #0]
 8001bdc:	4c1d      	ldr	r4, [pc, #116]	; (8001c54 <UART_AdvFeatureConfig+0xb8>)
 8001bde:	684a      	ldr	r2, [r1, #4]
 8001be0:	4022      	ands	r2, r4
 8001be2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001be4:	4322      	orrs	r2, r4
 8001be6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001be8:	06da      	lsls	r2, r3, #27
 8001bea:	d506      	bpl.n	8001bfa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001bec:	6801      	ldr	r1, [r0, #0]
 8001bee:	4c1a      	ldr	r4, [pc, #104]	; (8001c58 <UART_AdvFeatureConfig+0xbc>)
 8001bf0:	688a      	ldr	r2, [r1, #8]
 8001bf2:	4022      	ands	r2, r4
 8001bf4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001bf6:	4322      	orrs	r2, r4
 8001bf8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001bfa:	069a      	lsls	r2, r3, #26
 8001bfc:	d506      	bpl.n	8001c0c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001bfe:	6801      	ldr	r1, [r0, #0]
 8001c00:	4c16      	ldr	r4, [pc, #88]	; (8001c5c <UART_AdvFeatureConfig+0xc0>)
 8001c02:	688a      	ldr	r2, [r1, #8]
 8001c04:	4022      	ands	r2, r4
 8001c06:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001c08:	4322      	orrs	r2, r4
 8001c0a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001c0c:	065a      	lsls	r2, r3, #25
 8001c0e:	d510      	bpl.n	8001c32 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c10:	6801      	ldr	r1, [r0, #0]
 8001c12:	4d13      	ldr	r5, [pc, #76]	; (8001c60 <UART_AdvFeatureConfig+0xc4>)
 8001c14:	684a      	ldr	r2, [r1, #4]
 8001c16:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001c18:	402a      	ands	r2, r5
 8001c1a:	4322      	orrs	r2, r4
 8001c1c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	0352      	lsls	r2, r2, #13
 8001c22:	4294      	cmp	r4, r2
 8001c24:	d105      	bne.n	8001c32 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001c26:	684a      	ldr	r2, [r1, #4]
 8001c28:	4c0e      	ldr	r4, [pc, #56]	; (8001c64 <UART_AdvFeatureConfig+0xc8>)
 8001c2a:	4022      	ands	r2, r4
 8001c2c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001c2e:	4322      	orrs	r2, r4
 8001c30:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001c32:	061b      	lsls	r3, r3, #24
 8001c34:	d506      	bpl.n	8001c44 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001c36:	6802      	ldr	r2, [r0, #0]
 8001c38:	490b      	ldr	r1, [pc, #44]	; (8001c68 <UART_AdvFeatureConfig+0xcc>)
 8001c3a:	6853      	ldr	r3, [r2, #4]
 8001c3c:	400b      	ands	r3, r1
 8001c3e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001c40:	430b      	orrs	r3, r1
 8001c42:	6053      	str	r3, [r2, #4]
}
 8001c44:	bd30      	pop	{r4, r5, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	fffdffff 	.word	0xfffdffff
 8001c4c:	fffeffff 	.word	0xfffeffff
 8001c50:	fffbffff 	.word	0xfffbffff
 8001c54:	ffff7fff 	.word	0xffff7fff
 8001c58:	ffffefff 	.word	0xffffefff
 8001c5c:	ffffdfff 	.word	0xffffdfff
 8001c60:	ffefffff 	.word	0xffefffff
 8001c64:	ff9fffff 	.word	0xff9fffff
 8001c68:	fff7ffff 	.word	0xfff7ffff

08001c6c <UART_WaitOnFlagUntilTimeout>:
{
 8001c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001c6e:	2780      	movs	r7, #128	; 0x80
{
 8001c70:	0004      	movs	r4, r0
 8001c72:	000e      	movs	r6, r1
 8001c74:	0015      	movs	r5, r2
 8001c76:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001c78:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c7a:	6822      	ldr	r2, [r4, #0]
 8001c7c:	69d3      	ldr	r3, [r2, #28]
 8001c7e:	4033      	ands	r3, r6
 8001c80:	1b9b      	subs	r3, r3, r6
 8001c82:	4259      	negs	r1, r3
 8001c84:	414b      	adcs	r3, r1
 8001c86:	42ab      	cmp	r3, r5
 8001c88:	d001      	beq.n	8001c8e <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	e01c      	b.n	8001cc8 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8001c8e:	9b08      	ldr	r3, [sp, #32]
 8001c90:	3301      	adds	r3, #1
 8001c92:	d0f3      	beq.n	8001c7c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c94:	f7fe fb20 	bl	80002d8 <HAL_GetTick>
 8001c98:	9b01      	ldr	r3, [sp, #4]
 8001c9a:	9a08      	ldr	r2, [sp, #32]
 8001c9c:	1ac0      	subs	r0, r0, r3
 8001c9e:	6823      	ldr	r3, [r4, #0]
 8001ca0:	4282      	cmp	r2, r0
 8001ca2:	d301      	bcc.n	8001ca8 <UART_WaitOnFlagUntilTimeout+0x3c>
 8001ca4:	2a00      	cmp	r2, #0
 8001ca6:	d110      	bne.n	8001cca <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4913      	ldr	r1, [pc, #76]	; (8001cf8 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8001cac:	400a      	ands	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	31a3      	adds	r1, #163	; 0xa3
 8001cb4:	31ff      	adds	r1, #255	; 0xff
 8001cb6:	438a      	bics	r2, r1
 8001cb8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001cba:	2320      	movs	r3, #32
 8001cbc:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001cbe:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8001cc0:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8001cc2:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8001cc4:	3470      	adds	r4, #112	; 0x70
 8001cc6:	7023      	strb	r3, [r4, #0]
}
 8001cc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001cca:	2104      	movs	r1, #4
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	420a      	tst	r2, r1
 8001cd0:	d0d3      	beq.n	8001c7a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001cd2:	69da      	ldr	r2, [r3, #28]
 8001cd4:	423a      	tst	r2, r7
 8001cd6:	d0d0      	beq.n	8001c7a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001cd8:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4906      	ldr	r1, [pc, #24]	; (8001cf8 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8001cde:	400a      	ands	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	31a3      	adds	r1, #163	; 0xa3
 8001ce6:	31ff      	adds	r1, #255	; 0xff
 8001ce8:	438a      	bics	r2, r1
 8001cea:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001cec:	2320      	movs	r3, #32
 8001cee:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001cf0:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001cf2:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001cf4:	e7e4      	b.n	8001cc0 <UART_WaitOnFlagUntilTimeout+0x54>
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	fffffe5f 	.word	0xfffffe5f

08001cfc <UART_CheckIdleState>:
{
 8001cfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cfe:	2600      	movs	r6, #0
{
 8001d00:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d02:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001d04:	f7fe fae8 	bl	80002d8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d08:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001d0a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	071b      	lsls	r3, r3, #28
 8001d10:	d415      	bmi.n	8001d3e <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001d12:	6823      	ldr	r3, [r4, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	075b      	lsls	r3, r3, #29
 8001d18:	d50a      	bpl.n	8001d30 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d1a:	2180      	movs	r1, #128	; 0x80
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <UART_CheckIdleState+0x5c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	03c9      	lsls	r1, r1, #15
 8001d24:	002b      	movs	r3, r5
 8001d26:	0020      	movs	r0, r4
 8001d28:	f7ff ffa0 	bl	8001c6c <UART_WaitOnFlagUntilTimeout>
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	d111      	bne.n	8001d54 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8001d30:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001d32:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001d34:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001d36:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001d38:	3470      	adds	r4, #112	; 0x70
 8001d3a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001d3c:	e00b      	b.n	8001d56 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d3e:	2180      	movs	r1, #128	; 0x80
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <UART_CheckIdleState+0x5c>)
 8001d42:	0032      	movs	r2, r6
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	0389      	lsls	r1, r1, #14
 8001d48:	0003      	movs	r3, r0
 8001d4a:	0020      	movs	r0, r4
 8001d4c:	f7ff ff8e 	bl	8001c6c <UART_WaitOnFlagUntilTimeout>
 8001d50:	2800      	cmp	r0, #0
 8001d52:	d0de      	beq.n	8001d12 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001d54:	2003      	movs	r0, #3
}
 8001d56:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001d58:	01ffffff 	.word	0x01ffffff

08001d5c <HAL_UART_Init>:
{
 8001d5c:	b510      	push	{r4, lr}
 8001d5e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001d60:	d101      	bne.n	8001d66 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001d62:	2001      	movs	r0, #1
}
 8001d64:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001d66:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d104      	bne.n	8001d76 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	3270      	adds	r2, #112	; 0x70
 8001d70:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001d72:	f000 fc63 	bl	800263c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001d76:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001d78:	2101      	movs	r1, #1
 8001d7a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001d7c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001d7e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d80:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001d82:	438b      	bics	r3, r1
 8001d84:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d86:	f7ff fe63 	bl	8001a50 <UART_SetConfig>
 8001d8a:	2801      	cmp	r0, #1
 8001d8c:	d0e9      	beq.n	8001d62 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8001d94:	0020      	movs	r0, r4
 8001d96:	f7ff ff01 	bl	8001b9c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	4907      	ldr	r1, [pc, #28]	; (8001dbc <HAL_UART_Init+0x60>)
 8001d9e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001da0:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001da2:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001da4:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001da6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	438a      	bics	r2, r1
 8001dac:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001dae:	2201      	movs	r2, #1
 8001db0:	6819      	ldr	r1, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001db6:	f7ff ffa1 	bl	8001cfc <UART_CheckIdleState>
 8001dba:	e7d3      	b.n	8001d64 <HAL_UART_Init+0x8>
 8001dbc:	ffffb7ff 	.word	0xffffb7ff

08001dc0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8001dc0:	4770      	bx	lr
	...

08001dc4 <ESP32Send>:
		"GET /api/timezone/Europe/Prague.txt HTTP/1.1\r\nHost: worldtimeapi.org\r\n\r\n";
uint16_t Rx_indx = 0;
uint8_t Rx_data[1], Rx_Buffer[700];

void ESP32Send(uint8_t *SendData)
{
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	0004      	movs	r4, r0
	uint8_t SizeOfSendData = strlen(SendData);
 8001dc8:	f7fe f99e 	bl	8000108 <strlen>
	HAL_UART_Transmit_IT(&huart2, SendData, SizeOfSendData);
 8001dcc:	0021      	movs	r1, r4
 8001dce:	b2c2      	uxtb	r2, r0
 8001dd0:	4801      	ldr	r0, [pc, #4]	; (8001dd8 <ESP32Send+0x14>)
 8001dd2:	f7ff fc8d 	bl	80016f0 <HAL_UART_Transmit_IT>

}
 8001dd6:	bd10      	pop	{r4, pc}
 8001dd8:	20000390 	.word	0x20000390

08001ddc <HAL_UART_RxCpltCallback>:
	CleanBuffer();

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ddc:	b510      	push	{r4, lr}

	Rx_Buffer[Rx_indx] = Rx_data[0];
 8001dde:	4a06      	ldr	r2, [pc, #24]	; (8001df8 <HAL_UART_RxCpltCallback+0x1c>)
 8001de0:	4906      	ldr	r1, [pc, #24]	; (8001dfc <HAL_UART_RxCpltCallback+0x20>)
 8001de2:	8813      	ldrh	r3, [r2, #0]
 8001de4:	780c      	ldrb	r4, [r1, #0]
 8001de6:	4806      	ldr	r0, [pc, #24]	; (8001e00 <HAL_UART_RxCpltCallback+0x24>)
 8001de8:	54c4      	strb	r4, [r0, r3]
	Rx_indx++;
 8001dea:	3301      	adds	r3, #1
 8001dec:	8013      	strh	r3, [r2, #0]
	HAL_UART_Receive_IT(&huart2, Rx_data, 1); //activate UART receive interrupt every time
 8001dee:	4805      	ldr	r0, [pc, #20]	; (8001e04 <HAL_UART_RxCpltCallback+0x28>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	f7ff fcbb 	bl	800176c <HAL_UART_Receive_IT>

}
 8001df6:	bd10      	pop	{r4, pc}
 8001df8:	20000074 	.word	0x20000074
 8001dfc:	200000d0 	.word	0x200000d0
 8001e00:	200000d1 	.word	0x200000d1
 8001e04:	20000390 	.word	0x20000390

08001e08 <CleanBuffer>:

void CleanBuffer(void)
{
	for (int i = 0; i < sizeof(Rx_Buffer); i++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	21af      	movs	r1, #175	; 0xaf
	{
		Rx_Buffer[i] = 0;
 8001e0c:	001a      	movs	r2, r3
{
 8001e0e:	b510      	push	{r4, lr}
		Rx_Buffer[i] = 0;
 8001e10:	4c04      	ldr	r4, [pc, #16]	; (8001e24 <CleanBuffer+0x1c>)
	for (int i = 0; i < sizeof(Rx_Buffer); i++)
 8001e12:	0089      	lsls	r1, r1, #2
		Rx_Buffer[i] = 0;
 8001e14:	1918      	adds	r0, r3, r4
	for (int i = 0; i < sizeof(Rx_Buffer); i++)
 8001e16:	3301      	adds	r3, #1
		Rx_Buffer[i] = 0;
 8001e18:	7002      	strb	r2, [r0, #0]
	for (int i = 0; i < sizeof(Rx_Buffer); i++)
 8001e1a:	428b      	cmp	r3, r1
 8001e1c:	d1fa      	bne.n	8001e14 <CleanBuffer+0xc>
	}
	Rx_indx = 0;
 8001e1e:	4b02      	ldr	r3, [pc, #8]	; (8001e28 <CleanBuffer+0x20>)
 8001e20:	801a      	strh	r2, [r3, #0]
}
 8001e22:	bd10      	pop	{r4, pc}
 8001e24:	200000d1 	.word	0x200000d1
 8001e28:	20000074 	.word	0x20000074

08001e2c <WiFiConnect>:
{
 8001e2c:	b570      	push	{r4, r5, r6, lr}
	HAL_Delay(1000);
 8001e2e:	24fa      	movs	r4, #250	; 0xfa
	HAL_Delay(3000);
 8001e30:	4d21      	ldr	r5, [pc, #132]	; (8001eb8 <WiFiConnect+0x8c>)
	HAL_UART_Receive_IT(&huart2, Rx_data, 1);
 8001e32:	2201      	movs	r2, #1
 8001e34:	4921      	ldr	r1, [pc, #132]	; (8001ebc <WiFiConnect+0x90>)
 8001e36:	4822      	ldr	r0, [pc, #136]	; (8001ec0 <WiFiConnect+0x94>)
 8001e38:	f7ff fc98 	bl	800176c <HAL_UART_Receive_IT>
	CleanBuffer();
 8001e3c:	f7ff ffe4 	bl	8001e08 <CleanBuffer>
	HAL_Delay(3000);
 8001e40:	0028      	movs	r0, r5
 8001e42:	f7fe fa4f 	bl	80002e4 <HAL_Delay>
	HAL_Delay(1000);
 8001e46:	00a4      	lsls	r4, r4, #2
	ESP32Send("ATE0\r\n");
 8001e48:	481e      	ldr	r0, [pc, #120]	; (8001ec4 <WiFiConnect+0x98>)
 8001e4a:	f7ff ffbb 	bl	8001dc4 <ESP32Send>
	HAL_Delay(1000);
 8001e4e:	0020      	movs	r0, r4
 8001e50:	f7fe fa48 	bl	80002e4 <HAL_Delay>
	ESP32Send("AT+CWQAP\r\n");
 8001e54:	481c      	ldr	r0, [pc, #112]	; (8001ec8 <WiFiConnect+0x9c>)
 8001e56:	f7ff ffb5 	bl	8001dc4 <ESP32Send>
	HAL_Delay(500);
 8001e5a:	20fa      	movs	r0, #250	; 0xfa
 8001e5c:	0040      	lsls	r0, r0, #1
 8001e5e:	f7fe fa41 	bl	80002e4 <HAL_Delay>
	ESP32Send("AT+CWMODE=1\r\n");
 8001e62:	481a      	ldr	r0, [pc, #104]	; (8001ecc <WiFiConnect+0xa0>)
 8001e64:	f7ff ffae 	bl	8001dc4 <ESP32Send>
	HAL_Delay(3000);
 8001e68:	0028      	movs	r0, r5
 8001e6a:	f7fe fa3b 	bl	80002e4 <HAL_Delay>
	ESP32Send("AT+CWJAP=\"");
 8001e6e:	4818      	ldr	r0, [pc, #96]	; (8001ed0 <WiFiConnect+0xa4>)
 8001e70:	f7ff ffa8 	bl	8001dc4 <ESP32Send>
	HAL_Delay(1);
 8001e74:	2001      	movs	r0, #1
 8001e76:	f7fe fa35 	bl	80002e4 <HAL_Delay>
	ESP32Send(SSID);
 8001e7a:	4816      	ldr	r0, [pc, #88]	; (8001ed4 <WiFiConnect+0xa8>)
 8001e7c:	f7ff ffa2 	bl	8001dc4 <ESP32Send>
	HAL_Delay(1);
 8001e80:	2001      	movs	r0, #1
 8001e82:	f7fe fa2f 	bl	80002e4 <HAL_Delay>
	ESP32Send("\",\"");
 8001e86:	4814      	ldr	r0, [pc, #80]	; (8001ed8 <WiFiConnect+0xac>)
 8001e88:	f7ff ff9c 	bl	8001dc4 <ESP32Send>
	HAL_Delay(1);
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f7fe fa29 	bl	80002e4 <HAL_Delay>
	ESP32Send(Password);
 8001e92:	4812      	ldr	r0, [pc, #72]	; (8001edc <WiFiConnect+0xb0>)
 8001e94:	f7ff ff96 	bl	8001dc4 <ESP32Send>
	HAL_Delay(1);
 8001e98:	2001      	movs	r0, #1
 8001e9a:	f7fe fa23 	bl	80002e4 <HAL_Delay>
	ESP32Send("\"\r\n");
 8001e9e:	4810      	ldr	r0, [pc, #64]	; (8001ee0 <WiFiConnect+0xb4>)
 8001ea0:	f7ff ff90 	bl	8001dc4 <ESP32Send>
	HAL_Delay(10000);
 8001ea4:	480f      	ldr	r0, [pc, #60]	; (8001ee4 <WiFiConnect+0xb8>)
 8001ea6:	f7fe fa1d 	bl	80002e4 <HAL_Delay>
	ESP32Send("AT+CWHOSTNAME=\"Nixie Clock\"\r\n");
 8001eaa:	480f      	ldr	r0, [pc, #60]	; (8001ee8 <WiFiConnect+0xbc>)
 8001eac:	f7ff ff8a 	bl	8001dc4 <ESP32Send>
	HAL_Delay(1000);
 8001eb0:	0020      	movs	r0, r4
 8001eb2:	f7fe fa17 	bl	80002e4 <HAL_Delay>
}
 8001eb6:	bd70      	pop	{r4, r5, r6, pc}
 8001eb8:	00000bb8 	.word	0x00000bb8
 8001ebc:	200000d0 	.word	0x200000d0
 8001ec0:	20000390 	.word	0x20000390
 8001ec4:	08002822 	.word	0x08002822
 8001ec8:	08002829 	.word	0x08002829
 8001ecc:	08002834 	.word	0x08002834
 8001ed0:	08002842 	.word	0x08002842
 8001ed4:	0800284d 	.word	0x0800284d
 8001ed8:	08002857 	.word	0x08002857
 8001edc:	0800285b 	.word	0x0800285b
 8001ee0:	08002881 	.word	0x08002881
 8001ee4:	00002710 	.word	0x00002710
 8001ee8:	08002867 	.word	0x08002867

08001eec <ESPSyncToRTC>:
{
 8001eec:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8001eee:	2201      	movs	r2, #1
{
 8001ef0:	b08d      	sub	sp, #52	; 0x34
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8001ef2:	2108      	movs	r1, #8
 8001ef4:	4876      	ldr	r0, [pc, #472]	; (80020d0 <ESPSyncToRTC+0x1e4>)
 8001ef6:	f7fe fbab 	bl	8000650 <HAL_GPIO_WritePin>
	ESP32Send("AT+CIPSTART=\"TCP\",\"worldtimeapi.org\",80\r\n");
 8001efa:	4876      	ldr	r0, [pc, #472]	; (80020d4 <ESPSyncToRTC+0x1e8>)
 8001efc:	f7ff ff62 	bl	8001dc4 <ESP32Send>
	HAL_Delay(500);
 8001f00:	20fa      	movs	r0, #250	; 0xfa
 8001f02:	0040      	lsls	r0, r0, #1
 8001f04:	f7fe f9ee 	bl	80002e4 <HAL_Delay>
	CleanBuffer();
 8001f08:	f7ff ff7e 	bl	8001e08 <CleanBuffer>
	ESP32Send("AT+CIPSEND=72\r\n");
 8001f0c:	4872      	ldr	r0, [pc, #456]	; (80020d8 <ESPSyncToRTC+0x1ec>)
 8001f0e:	f7ff ff59 	bl	8001dc4 <ESP32Send>
	HAL_Delay(500);
 8001f12:	20fa      	movs	r0, #250	; 0xfa
 8001f14:	0040      	lsls	r0, r0, #1
 8001f16:	f7fe f9e5 	bl	80002e4 <HAL_Delay>
	ESP32Send(HTTPRequest);
 8001f1a:	4870      	ldr	r0, [pc, #448]	; (80020dc <ESPSyncToRTC+0x1f0>)
 8001f1c:	f7ff ff52 	bl	8001dc4 <ESP32Send>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2108      	movs	r1, #8
 8001f24:	486a      	ldr	r0, [pc, #424]	; (80020d0 <ESPSyncToRTC+0x1e4>)
 8001f26:	f7fe fb93 	bl	8000650 <HAL_GPIO_WritePin>
	volatile uint16_t WaitTime = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	ad09      	add	r5, sp, #36	; 0x24
	BadConnection = 0;
 8001f2e:	4c6c      	ldr	r4, [pc, #432]	; (80020e0 <ESPSyncToRTC+0x1f4>)
	volatile uint16_t WaitTime = 0;
 8001f30:	802b      	strh	r3, [r5, #0]
			BadConnection = 1;
 8001f32:	7023      	strb	r3, [r4, #0]
	while ((Rx_indx < 300) && !BadConnection)
 8001f34:	232c      	movs	r3, #44	; 0x2c
 8001f36:	4a6b      	ldr	r2, [pc, #428]	; (80020e4 <ESPSyncToRTC+0x1f8>)
 8001f38:	33ff      	adds	r3, #255	; 0xff
 8001f3a:	8812      	ldrh	r2, [r2, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d802      	bhi.n	8001f46 <ESPSyncToRTC+0x5a>
 8001f40:	7823      	ldrb	r3, [r4, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d018      	beq.n	8001f78 <ESPSyncToRTC+0x8c>
	HAL_Delay(100);
 8001f46:	2064      	movs	r0, #100	; 0x64
 8001f48:	f7fe f9cc 	bl	80002e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, BadConnection);
 8001f4c:	7822      	ldrb	r2, [r4, #0]
 8001f4e:	2110      	movs	r1, #16
 8001f50:	485f      	ldr	r0, [pc, #380]	; (80020d0 <ESPSyncToRTC+0x1e4>)
 8001f52:	f7fe fb7d 	bl	8000650 <HAL_GPIO_WritePin>
	volatile uint16_t AddressOfBeginning = 0;
 8001f56:	230e      	movs	r3, #14
 8001f58:	2400      	movs	r4, #0
	Success = 1;
 8001f5a:	2001      	movs	r0, #1
	volatile uint16_t AddressOfBeginning = 0;
 8001f5c:	aa06      	add	r2, sp, #24
 8001f5e:	189b      	adds	r3, r3, r2
	Success = 1;
 8001f60:	4a61      	ldr	r2, [pc, #388]	; (80020e8 <ESPSyncToRTC+0x1fc>)
				& (SearchedString[1] == Rx_Buffer[(AddressOfBeginning + 1)])
 8001f62:	4962      	ldr	r1, [pc, #392]	; (80020ec <ESPSyncToRTC+0x200>)
	volatile uint16_t AddressOfBeginning = 0;
 8001f64:	801c      	strh	r4, [r3, #0]
	Success = 1;
 8001f66:	7010      	strb	r0, [r2, #0]
	while (!Found && Success)
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	d112      	bne.n	8001f92 <ESPSyncToRTC+0xa6>
 8001f6c:	2c00      	cmp	r4, #0
 8001f6e:	d001      	beq.n	8001f74 <ESPSyncToRTC+0x88>
 8001f70:	4b5d      	ldr	r3, [pc, #372]	; (80020e8 <ESPSyncToRTC+0x1fc>)
 8001f72:	7018      	strb	r0, [r3, #0]
 8001f74:	2200      	movs	r2, #0
 8001f76:	e054      	b.n	8002022 <ESPSyncToRTC+0x136>
		HAL_Delay(1);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f7fe f9b3 	bl	80002e4 <HAL_Delay>
		WaitTime++;
 8001f7e:	882b      	ldrh	r3, [r5, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	802b      	strh	r3, [r5, #0]
		if (WaitTime > 10000)
 8001f86:	882a      	ldrh	r2, [r5, #0]
 8001f88:	4b59      	ldr	r3, [pc, #356]	; (80020f0 <ESPSyncToRTC+0x204>)
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d9d2      	bls.n	8001f34 <ESPSyncToRTC+0x48>
			BadConnection = 1;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e7cf      	b.n	8001f32 <ESPSyncToRTC+0x46>
		if ((SearchedString[0] == Rx_Buffer[AddressOfBeginning])
 8001f92:	881f      	ldrh	r7, [r3, #0]
				& (SearchedString[1] == Rx_Buffer[(AddressOfBeginning + 1)])
 8001f94:	881d      	ldrh	r5, [r3, #0]
				& (SearchedString[2] == Rx_Buffer[(AddressOfBeginning + 2)])
 8001f96:	881a      	ldrh	r2, [r3, #0]
				& (SearchedString[3] == Rx_Buffer[(AddressOfBeginning + 3)])
 8001f98:	881e      	ldrh	r6, [r3, #0]
				& (SearchedString[2] == Rx_Buffer[(AddressOfBeginning + 2)])
 8001f9a:	9203      	str	r2, [sp, #12]
				& (SearchedString[4] == Rx_Buffer[(AddressOfBeginning + 4)])
 8001f9c:	881a      	ldrh	r2, [r3, #0]
				& (SearchedString[1] == Rx_Buffer[(AddressOfBeginning + 1)])
 8001f9e:	194d      	adds	r5, r1, r5
				& (SearchedString[4] == Rx_Buffer[(AddressOfBeginning + 4)])
 8001fa0:	9204      	str	r2, [sp, #16]
				& (SearchedString[5] == Rx_Buffer[(AddressOfBeginning + 5)])
 8001fa2:	881a      	ldrh	r2, [r3, #0]
				& (SearchedString[1] == Rx_Buffer[(AddressOfBeginning + 1)])
 8001fa4:	786d      	ldrb	r5, [r5, #1]
				& (SearchedString[5] == Rx_Buffer[(AddressOfBeginning + 5)])
 8001fa6:	9205      	str	r2, [sp, #20]
				& (SearchedString[6] == Rx_Buffer[(AddressOfBeginning + 6)])
 8001fa8:	881a      	ldrh	r2, [r3, #0]
				& (SearchedString[1] == Rx_Buffer[(AddressOfBeginning + 1)])
 8001faa:	3d61      	subs	r5, #97	; 0x61
				& (SearchedString[6] == Rx_Buffer[(AddressOfBeginning + 6)])
 8001fac:	9206      	str	r2, [sp, #24]
				& (SearchedString[7] == Rx_Buffer[(AddressOfBeginning + 7)]))
 8001fae:	881a      	ldrh	r2, [r3, #0]
				& (SearchedString[1] == Rx_Buffer[(AddressOfBeginning + 1)])
 8001fb0:	5dcf      	ldrb	r7, [r1, r7]
				& (SearchedString[7] == Rx_Buffer[(AddressOfBeginning + 7)]))
 8001fb2:	9207      	str	r2, [sp, #28]
				& (SearchedString[1] == Rx_Buffer[(AddressOfBeginning + 1)])
 8001fb4:	426a      	negs	r2, r5
 8001fb6:	416a      	adcs	r2, r5
 8001fb8:	4694      	mov	ip, r2
				& (SearchedString[2] == Rx_Buffer[(AddressOfBeginning + 2)])
 8001fba:	9a03      	ldr	r2, [sp, #12]
				& (SearchedString[1] == Rx_Buffer[(AddressOfBeginning + 1)])
 8001fbc:	3f64      	subs	r7, #100	; 0x64
				& (SearchedString[2] == Rx_Buffer[(AddressOfBeginning + 2)])
 8001fbe:	188a      	adds	r2, r1, r2
 8001fc0:	7892      	ldrb	r2, [r2, #2]
				& (SearchedString[3] == Rx_Buffer[(AddressOfBeginning + 3)])
 8001fc2:	198e      	adds	r6, r1, r6
				& (SearchedString[2] == Rx_Buffer[(AddressOfBeginning + 2)])
 8001fc4:	3a74      	subs	r2, #116	; 0x74
 8001fc6:	4255      	negs	r5, r2
 8001fc8:	4155      	adcs	r5, r2
 8001fca:	4662      	mov	r2, ip
 8001fcc:	4015      	ands	r5, r2
				& (SearchedString[1] == Rx_Buffer[(AddressOfBeginning + 1)])
 8001fce:	427a      	negs	r2, r7
 8001fd0:	417a      	adcs	r2, r7
				& (SearchedString[3] == Rx_Buffer[(AddressOfBeginning + 3)])
 8001fd2:	78f6      	ldrb	r6, [r6, #3]
 8001fd4:	4015      	ands	r5, r2
 8001fd6:	3e65      	subs	r6, #101	; 0x65
 8001fd8:	4272      	negs	r2, r6
 8001fda:	4172      	adcs	r2, r6
 8001fdc:	4015      	ands	r5, r2
				& (SearchedString[4] == Rx_Buffer[(AddressOfBeginning + 4)])
 8001fde:	9a04      	ldr	r2, [sp, #16]
 8001fe0:	188a      	adds	r2, r1, r2
 8001fe2:	7917      	ldrb	r7, [r2, #4]
 8001fe4:	3f74      	subs	r7, #116	; 0x74
 8001fe6:	427a      	negs	r2, r7
 8001fe8:	417a      	adcs	r2, r7
 8001fea:	4015      	ands	r5, r2
				& (SearchedString[5] == Rx_Buffer[(AddressOfBeginning + 5)])
 8001fec:	9a05      	ldr	r2, [sp, #20]
 8001fee:	188a      	adds	r2, r1, r2
 8001ff0:	7956      	ldrb	r6, [r2, #5]
 8001ff2:	3e69      	subs	r6, #105	; 0x69
 8001ff4:	4272      	negs	r2, r6
 8001ff6:	4172      	adcs	r2, r6
 8001ff8:	402a      	ands	r2, r5
				& (SearchedString[6] == Rx_Buffer[(AddressOfBeginning + 6)])
 8001ffa:	9d06      	ldr	r5, [sp, #24]
 8001ffc:	194d      	adds	r5, r1, r5
 8001ffe:	79ad      	ldrb	r5, [r5, #6]
 8002000:	3d6d      	subs	r5, #109	; 0x6d
 8002002:	426e      	negs	r6, r5
 8002004:	4175      	adcs	r5, r6
 8002006:	4015      	ands	r5, r2
				& (SearchedString[7] == Rx_Buffer[(AddressOfBeginning + 7)]))
 8002008:	9a07      	ldr	r2, [sp, #28]
 800200a:	188a      	adds	r2, r1, r2
 800200c:	79d2      	ldrb	r2, [r2, #7]
 800200e:	3a65      	subs	r2, #101	; 0x65
 8002010:	4257      	negs	r7, r2
 8002012:	417a      	adcs	r2, r7
 8002014:	402a      	ands	r2, r5
		if ((SearchedString[0] == Rx_Buffer[AddressOfBeginning])
 8002016:	d04e      	beq.n	80020b6 <ESPSyncToRTC+0x1ca>
 8002018:	2c00      	cmp	r4, #0
 800201a:	d002      	beq.n	8002022 <ESPSyncToRTC+0x136>
 800201c:	2101      	movs	r1, #1
 800201e:	4b32      	ldr	r3, [pc, #200]	; (80020e8 <ESPSyncToRTC+0x1fc>)
 8002020:	7019      	strb	r1, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, !Success);
 8002022:	2501      	movs	r5, #1
 8002024:	2120      	movs	r1, #32
 8002026:	406a      	eors	r2, r5
 8002028:	4829      	ldr	r0, [pc, #164]	; (80020d0 <ESPSyncToRTC+0x1e4>)
 800202a:	f7fe fb11 	bl	8000650 <HAL_GPIO_WritePin>
	if (Success)
 800202e:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <ESPSyncToRTC+0x1fc>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d032      	beq.n	800209c <ESPSyncToRTC+0x1b0>
		uint8_t Time[6] =
 8002036:	ac0a      	add	r4, sp, #40	; 0x28
 8002038:	2206      	movs	r2, #6
 800203a:	2100      	movs	r1, #0
 800203c:	0020      	movs	r0, r4
 800203e:	f000 fba6 	bl	800278e <memset>
		{ 0, (Rx_Buffer[AddressOfBeginning + 27] - 48) << 4
 8002042:	210e      	movs	r1, #14
 8002044:	ab06      	add	r3, sp, #24
 8002046:	18c9      	adds	r1, r1, r3
 8002048:	880a      	ldrh	r2, [r1, #0]
 800204a:	4b28      	ldr	r3, [pc, #160]	; (80020ec <ESPSyncToRTC+0x200>)
				| (Rx_Buffer[AddressOfBeginning + 28] - 48),
 800204c:	8808      	ldrh	r0, [r1, #0]
		{ 0, (Rx_Buffer[AddressOfBeginning + 27] - 48) << 4
 800204e:	189a      	adds	r2, r3, r2
 8002050:	7ed2      	ldrb	r2, [r2, #27]
				| (Rx_Buffer[AddressOfBeginning + 28] - 48),
 8002052:	1818      	adds	r0, r3, r0
 8002054:	7f00      	ldrb	r0, [r0, #28]
		{ 0, (Rx_Buffer[AddressOfBeginning + 27] - 48) << 4
 8002056:	3a30      	subs	r2, #48	; 0x30
				| (Rx_Buffer[AddressOfBeginning + 28] - 48),
 8002058:	3830      	subs	r0, #48	; 0x30
		{ 0, (Rx_Buffer[AddressOfBeginning + 27] - 48) << 4
 800205a:	0112      	lsls	r2, r2, #4
				| (Rx_Buffer[AddressOfBeginning + 28] - 48),
 800205c:	4302      	orrs	r2, r0
		uint8_t Time[6] =
 800205e:	7062      	strb	r2, [r4, #1]
				(Rx_Buffer[AddressOfBeginning + 24] - 48) << 4
 8002060:	880a      	ldrh	r2, [r1, #0]
						| (Rx_Buffer[AddressOfBeginning + 25] - 48),
 8002062:	8808      	ldrh	r0, [r1, #0]
				(Rx_Buffer[AddressOfBeginning + 24] - 48) << 4
 8002064:	189a      	adds	r2, r3, r2
 8002066:	7e12      	ldrb	r2, [r2, #24]
						| (Rx_Buffer[AddressOfBeginning + 25] - 48),
 8002068:	1818      	adds	r0, r3, r0
 800206a:	7e40      	ldrb	r0, [r0, #25]
				(Rx_Buffer[AddressOfBeginning + 24] - 48) << 4
 800206c:	3a30      	subs	r2, #48	; 0x30
						| (Rx_Buffer[AddressOfBeginning + 25] - 48),
 800206e:	3830      	subs	r0, #48	; 0x30
				(Rx_Buffer[AddressOfBeginning + 24] - 48) << 4
 8002070:	0112      	lsls	r2, r2, #4
						| (Rx_Buffer[AddressOfBeginning + 25] - 48),
 8002072:	4302      	orrs	r2, r0
		uint8_t Time[6] =
 8002074:	70a2      	strb	r2, [r4, #2]
				(Rx_Buffer[AddressOfBeginning + 21] - 48) << 4
 8002076:	880a      	ldrh	r2, [r1, #0]
						| (Rx_Buffer[AddressOfBeginning + 22] - 48) };
 8002078:	8809      	ldrh	r1, [r1, #0]
				(Rx_Buffer[AddressOfBeginning + 21] - 48) << 4
 800207a:	189a      	adds	r2, r3, r2
 800207c:	7d52      	ldrb	r2, [r2, #21]
						| (Rx_Buffer[AddressOfBeginning + 22] - 48) };
 800207e:	185b      	adds	r3, r3, r1
 8002080:	7d9b      	ldrb	r3, [r3, #22]
				(Rx_Buffer[AddressOfBeginning + 21] - 48) << 4
 8002082:	3a30      	subs	r2, #48	; 0x30
 8002084:	0112      	lsls	r2, r2, #4
						| (Rx_Buffer[AddressOfBeginning + 22] - 48) };
 8002086:	3b30      	subs	r3, #48	; 0x30
 8002088:	4313      	orrs	r3, r2
		uint8_t Time[6] =
 800208a:	70e3      	strb	r3, [r4, #3]
		HAL_I2C_Master_Transmit(&hi2c1, 0x68 << 1, Time, 4, 50);
 800208c:	2332      	movs	r3, #50	; 0x32
 800208e:	0022      	movs	r2, r4
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	21d0      	movs	r1, #208	; 0xd0
 8002094:	3b2e      	subs	r3, #46	; 0x2e
 8002096:	4817      	ldr	r0, [pc, #92]	; (80020f4 <ESPSyncToRTC+0x208>)
 8002098:	f7fe fc60 	bl	800095c <HAL_I2C_Master_Transmit>
	HAL_Delay(100);
 800209c:	2064      	movs	r0, #100	; 0x64
 800209e:	f7fe f921 	bl	80002e4 <HAL_Delay>
	ESP32Send("AT+CIPCLOSE");
 80020a2:	4815      	ldr	r0, [pc, #84]	; (80020f8 <ESPSyncToRTC+0x20c>)
 80020a4:	f7ff fe8e 	bl	8001dc4 <ESP32Send>
	HAL_Delay(100);
 80020a8:	2064      	movs	r0, #100	; 0x64
 80020aa:	f7fe f91b 	bl	80002e4 <HAL_Delay>
	CleanBuffer();
 80020ae:	f7ff feab 	bl	8001e08 <CleanBuffer>
}
 80020b2:	b00d      	add	sp, #52	; 0x34
 80020b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			AddressOfBeginning++;
 80020b6:	881d      	ldrh	r5, [r3, #0]
			if ((AddressOfBeginning - 2) == sizeof(Rx_Buffer))
 80020b8:	4e10      	ldr	r6, [pc, #64]	; (80020fc <ESPSyncToRTC+0x210>)
			AddressOfBeginning++;
 80020ba:	3501      	adds	r5, #1
 80020bc:	b2ad      	uxth	r5, r5
 80020be:	801d      	strh	r5, [r3, #0]
			if ((AddressOfBeginning - 2) == sizeof(Rx_Buffer))
 80020c0:	881d      	ldrh	r5, [r3, #0]
 80020c2:	42b5      	cmp	r5, r6
 80020c4:	d000      	beq.n	80020c8 <ESPSyncToRTC+0x1dc>
 80020c6:	e74f      	b.n	8001f68 <ESPSyncToRTC+0x7c>
 80020c8:	0004      	movs	r4, r0
				Success = 0;
 80020ca:	0010      	movs	r0, r2
 80020cc:	e74c      	b.n	8001f68 <ESPSyncToRTC+0x7c>
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	48000400 	.word	0x48000400
 80020d4:	080027dc 	.word	0x080027dc
 80020d8:	08002806 	.word	0x08002806
 80020dc:	20000008 	.word	0x20000008
 80020e0:	20000080 	.word	0x20000080
 80020e4:	20000074 	.word	0x20000074
 80020e8:	2000038d 	.word	0x2000038d
 80020ec:	200000d1 	.word	0x200000d1
 80020f0:	00002710 	.word	0x00002710
 80020f4:	20000084 	.word	0x20000084
 80020f8:	08002816 	.word	0x08002816
 80020fc:	000002be 	.word	0x000002be

08002100 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002100:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002102:	2001      	movs	r0, #1
 8002104:	4a08      	ldr	r2, [pc, #32]	; (8002128 <MX_DMA_Init+0x28>)
 8002106:	6951      	ldr	r1, [r2, #20]
 8002108:	4301      	orrs	r1, r0
 800210a:	6151      	str	r1, [r2, #20]
 800210c:	6953      	ldr	r3, [r2, #20]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002110:	4003      	ands	r3, r0
 8002112:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8002114:	0011      	movs	r1, r2
 8002116:	300a      	adds	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002118:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800211a:	f7fe f8f5 	bl	8000308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800211e:	200b      	movs	r0, #11
 8002120:	f7fe f922 	bl	8000368 <HAL_NVIC_EnableIRQ>

}
 8002124:	bd07      	pop	{r0, r1, r2, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	40021000 	.word	0x40021000

0800212c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800212c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	2214      	movs	r2, #20
 8002132:	2100      	movs	r1, #0
 8002134:	a803      	add	r0, sp, #12
 8002136:	f000 fb2a 	bl	800278e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800213a:	2080      	movs	r0, #128	; 0x80
 800213c:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <MX_GPIO_Init+0xac>)
 800213e:	0300      	lsls	r0, r0, #12
 8002140:	6959      	ldr	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8002142:	4f26      	ldr	r7, [pc, #152]	; (80021dc <MX_GPIO_Init+0xb0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002144:	4301      	orrs	r1, r0
 8002146:	6159      	str	r1, [r3, #20]
 8002148:	695a      	ldr	r2, [r3, #20]
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800214a:	4e25      	ldr	r6, [pc, #148]	; (80021e0 <MX_GPIO_Init+0xb4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800214c:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002150:	9200      	str	r2, [sp, #0]
 8002152:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002154:	6959      	ldr	r1, [r3, #20]
 8002156:	0280      	lsls	r0, r0, #10
 8002158:	4301      	orrs	r1, r0
 800215a:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002160:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002162:	4002      	ands	r2, r0
 8002164:	9201      	str	r2, [sp, #4]
 8002166:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002168:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800216a:	0038      	movs	r0, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800216c:	430a      	orrs	r2, r1
 800216e:	615a      	str	r2, [r3, #20]
 8002170:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8002172:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002174:	400b      	ands	r3, r1
 8002176:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8002178:	214f      	movs	r1, #79	; 0x4f
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800217c:	f7fe fa68 	bl	8000650 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002180:	2200      	movs	r2, #0
 8002182:	0030      	movs	r0, r6
 8002184:	4917      	ldr	r1, [pc, #92]	; (80021e4 <MX_GPIO_Init+0xb8>)
 8002186:	f7fe fa63 	bl	8000650 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218a:	2401      	movs	r4, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800218e:	234f      	movs	r3, #79	; 0x4f
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002190:	a903      	add	r1, sp, #12
 8002192:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8002194:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002196:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219c:	f7fe f9a8 	bl	80004f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <MX_GPIO_Init+0xbc>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	a903      	add	r1, sp, #12
 80021a6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021a8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021aa:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ac:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f7fe f99f 	bl	80004f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <MX_GPIO_Init+0xb8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	a903      	add	r1, sp, #12
 80021b6:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80021b8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ba:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c0:	f7fe f996 	bl	80004f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 80021c4:	002a      	movs	r2, r5
 80021c6:	0021      	movs	r1, r4
 80021c8:	2005      	movs	r0, #5
 80021ca:	f7fe f89d 	bl	8000308 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80021ce:	2005      	movs	r0, #5
 80021d0:	f7fe f8ca 	bl	8000368 <HAL_NVIC_EnableIRQ>

}
 80021d4:	b009      	add	sp, #36	; 0x24
 80021d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	48000800 	.word	0x48000800
 80021e0:	48000400 	.word	0x48000400
 80021e4:	00004038 	.word	0x00004038
 80021e8:	10110000 	.word	0x10110000

080021ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021ec:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <MX_I2C1_Init+0x50>)
 80021f0:	4c13      	ldr	r4, [pc, #76]	; (8002240 <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x20303E5D;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021f2:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 80021f4:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80021f6:	4b13      	ldr	r3, [pc, #76]	; (8002244 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021f8:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x20303E5D;
 80021fa:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80021fc:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021fe:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8002200:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002202:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002204:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002206:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002208:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800220a:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800220c:	f7fe fb50 	bl	80008b0 <HAL_I2C_Init>
 8002210:	2800      	cmp	r0, #0
 8002212:	d001      	beq.n	8002218 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 8002214:	f000 f8a6 	bl	8002364 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002218:	2100      	movs	r1, #0
 800221a:	0020      	movs	r0, r4
 800221c:	f7fe fccc 	bl	8000bb8 <HAL_I2CEx_ConfigAnalogFilter>
 8002220:	2800      	cmp	r0, #0
 8002222:	d001      	beq.n	8002228 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 8002224:	f000 f89e 	bl	8002364 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002228:	2100      	movs	r1, #0
 800222a:	0020      	movs	r0, r4
 800222c:	f7fe fcea 	bl	8000c04 <HAL_I2CEx_ConfigDigitalFilter>
 8002230:	2800      	cmp	r0, #0
 8002232:	d001      	beq.n	8002238 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002234:	f000 f896 	bl	8002364 <Error_Handler>
  }

}
 8002238:	bd10      	pop	{r4, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	40005400 	.word	0x40005400
 8002240:	20000084 	.word	0x20000084
 8002244:	20303e5d 	.word	0x20303e5d

08002248 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002248:	b510      	push	{r4, lr}
 800224a:	0004      	movs	r4, r0
 800224c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224e:	2214      	movs	r2, #20
 8002250:	2100      	movs	r1, #0
 8002252:	a803      	add	r0, sp, #12
 8002254:	f000 fa9b 	bl	800278e <memset>
  if(i2cHandle->Instance==I2C1)
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_I2C_MspInit+0x5c>)
 800225a:	6822      	ldr	r2, [r4, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d11f      	bne.n	80022a0 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002260:	2180      	movs	r1, #128	; 0x80
 8002262:	4c11      	ldr	r4, [pc, #68]	; (80022a8 <HAL_I2C_MspInit+0x60>)
 8002264:	02c9      	lsls	r1, r1, #11
 8002266:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002268:	4810      	ldr	r0, [pc, #64]	; (80022ac <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226a:	430a      	orrs	r2, r1
 800226c:	6162      	str	r2, [r4, #20]
 800226e:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002270:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	400b      	ands	r3, r1
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002278:	23c0      	movs	r3, #192	; 0xc0
 800227a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800227c:	3bae      	subs	r3, #174	; 0xae
 800227e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002280:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002282:	3b11      	subs	r3, #17
 8002284:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002286:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002288:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228a:	f7fe f931 	bl	80004f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800228e:	2180      	movs	r1, #128	; 0x80
 8002290:	69e2      	ldr	r2, [r4, #28]
 8002292:	0389      	lsls	r1, r1, #14
 8002294:	430a      	orrs	r2, r1
 8002296:	61e2      	str	r2, [r4, #28]
 8002298:	69e3      	ldr	r3, [r4, #28]
 800229a:	400b      	ands	r3, r1
 800229c:	9302      	str	r3, [sp, #8]
 800229e:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80022a0:	b008      	add	sp, #32
 80022a2:	bd10      	pop	{r4, pc}
 80022a4:	40005400 	.word	0x40005400
 80022a8:	40021000 	.word	0x40021000
 80022ac:	48000400 	.word	0x48000400

080022b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022b0:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022b2:	2410      	movs	r4, #16
{
 80022b4:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b6:	2230      	movs	r2, #48	; 0x30
 80022b8:	2100      	movs	r1, #0
 80022ba:	a80a      	add	r0, sp, #40	; 0x28
 80022bc:	f000 fa67 	bl	800278e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c0:	0022      	movs	r2, r4
 80022c2:	2100      	movs	r1, #0
 80022c4:	a801      	add	r0, sp, #4
 80022c6:	f000 fa62 	bl	800278e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022ca:	2214      	movs	r2, #20
 80022cc:	2100      	movs	r1, #0
 80022ce:	a805      	add	r0, sp, #20
 80022d0:	f000 fa5d 	bl	800278e <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80022d4:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022d6:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022d8:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80022da:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022dc:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80022de:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022e0:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022e2:	960d      	str	r6, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022e4:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e6:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e8:	f7fe fcb0 	bl	8000c4c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ec:	2307      	movs	r3, #7
 80022ee:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f0:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80022f2:	0031      	movs	r1, r6
 80022f4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022f8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022fa:	9502      	str	r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80022fc:	f7fe feda 	bl	80010b4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002300:	2320      	movs	r3, #32
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002302:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002304:	9305      	str	r3, [sp, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8002306:	9408      	str	r4, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002308:	f7fe ff68 	bl	80011dc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800230c:	b016      	add	sp, #88	; 0x58
 800230e:	bd70      	pop	{r4, r5, r6, pc}

08002310 <main>:
{
 8002310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_Init();
 8002312:	f7fd ffc5 	bl	80002a0 <HAL_Init>
  SystemClock_Config();
 8002316:	f7ff ffcb 	bl	80022b0 <SystemClock_Config>
  MX_GPIO_Init();
 800231a:	f7ff ff07 	bl	800212c <MX_GPIO_Init>
  MX_I2C1_Init();
 800231e:	f7ff ff65 	bl	80021ec <MX_I2C1_Init>
  MX_SPI2_Init();
 8002322:	f000 f873 	bl	800240c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002326:	f000 f96d 	bl	8002604 <MX_USART2_UART_Init>
  MX_DMA_Init();
 800232a:	f7ff fee9 	bl	8002100 <MX_DMA_Init>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2140      	movs	r1, #64	; 0x40
 8002332:	480a      	ldr	r0, [pc, #40]	; (800235c <main+0x4c>)
 8002334:	f7fe f98c 	bl	8000650 <HAL_GPIO_WritePin>
	RTC_config[0] = 0xE;
 8002338:	230e      	movs	r3, #14
 800233a:	aa03      	add	r2, sp, #12
 800233c:	7013      	strb	r3, [r2, #0]
	RTC_config[1] = 0x0;
 800233e:	2300      	movs	r3, #0
 8002340:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, 0x68 << 1, RTC_config, 3, 50);
 8002342:	3332      	adds	r3, #50	; 0x32
 8002344:	21d0      	movs	r1, #208	; 0xd0
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	4805      	ldr	r0, [pc, #20]	; (8002360 <main+0x50>)
 800234a:	3b2f      	subs	r3, #47	; 0x2f
 800234c:	f7fe fb06 	bl	800095c <HAL_I2C_Master_Transmit>
	WiFiConnect();
 8002350:	f7ff fd6c 	bl	8001e2c <WiFiConnect>
	ESPSyncToRTC();
 8002354:	f7ff fdca 	bl	8001eec <ESPSyncToRTC>
 8002358:	e7fe      	b.n	8002358 <main+0x48>
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	48000800 	.word	0x48000800
 8002360:	20000084 	.word	0x20000084

08002364 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002364:	4770      	bx	lr
	...

08002368 <display>:

uint8_t NixieCleanDelay = 50;

void display(uint8_t num1, uint8_t num2, uint8_t num3, uint8_t num4,
		uint8_t num5, uint8_t num6)
{
 8002368:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800236a:	ad07      	add	r5, sp, #28
 800236c:	782d      	ldrb	r5, [r5, #0]
	uint8_t data[6] =
 800236e:	466e      	mov	r6, sp
	{ 255 - num6, 255 - num5, 255 - num4, 255 - num3, 255 - num2, 255 - num1 };
 8002370:	43ed      	mvns	r5, r5
{
 8002372:	ac06      	add	r4, sp, #24
 8002374:	7824      	ldrb	r4, [r4, #0]
	uint8_t data[6] =
 8002376:	7035      	strb	r5, [r6, #0]
	{ 255 - num6, 255 - num5, 255 - num4, 255 - num3, 255 - num2, 255 - num1 };
 8002378:	43e4      	mvns	r4, r4
 800237a:	43db      	mvns	r3, r3
 800237c:	43d2      	mvns	r2, r2
 800237e:	43c9      	mvns	r1, r1
 8002380:	43c0      	mvns	r0, r0

	HAL_SPI_Transmit(&hspi2, data, 6, 100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002382:	2580      	movs	r5, #128	; 0x80
	uint8_t data[6] =
 8002384:	7074      	strb	r4, [r6, #1]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002386:	4c0d      	ldr	r4, [pc, #52]	; (80023bc <display+0x54>)
	uint8_t data[6] =
 8002388:	70b3      	strb	r3, [r6, #2]
 800238a:	70f2      	strb	r2, [r6, #3]
	HAL_SPI_Transmit(&hspi2, data, 6, 100);
 800238c:	2364      	movs	r3, #100	; 0x64
	uint8_t data[6] =
 800238e:	7131      	strb	r1, [r6, #4]
 8002390:	7170      	strb	r0, [r6, #5]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002392:	01ed      	lsls	r5, r5, #7
	HAL_SPI_Transmit(&hspi2, data, 6, 100);
 8002394:	4669      	mov	r1, sp
 8002396:	2206      	movs	r2, #6
 8002398:	4809      	ldr	r0, [pc, #36]	; (80023c0 <display+0x58>)
 800239a:	f7ff f88b 	bl	80014b4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800239e:	0029      	movs	r1, r5
 80023a0:	2200      	movs	r2, #0
 80023a2:	0020      	movs	r0, r4
 80023a4:	f7fe f954 	bl	8000650 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80023a8:	2001      	movs	r0, #1
 80023aa:	f7fd ff9b 	bl	80002e4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80023ae:	0029      	movs	r1, r5
 80023b0:	2201      	movs	r2, #1
 80023b2:	0020      	movs	r0, r4
 80023b4:	f7fe f94c 	bl	8000650 <HAL_GPIO_WritePin>
}
 80023b8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	48000400 	.word	0x48000400
 80023c0:	20000414 	.word	0x20000414

080023c4 <NixieClean>:

void NixieClean(void)
{
 80023c4:	b537      	push	{r0, r1, r2, r4, r5, lr}

	for (int n = 0; n < 10; n++)
 80023c6:	2400      	movs	r4, #0
	{
		display(n, n, n, n, n, n);
 80023c8:	b2e0      	uxtb	r0, r4
 80023ca:	0003      	movs	r3, r0
 80023cc:	0002      	movs	r2, r0
 80023ce:	0001      	movs	r1, r0
 80023d0:	9001      	str	r0, [sp, #4]
 80023d2:	9000      	str	r0, [sp, #0]
 80023d4:	f7ff ffc8 	bl	8002368 <display>
		HAL_Delay(NixieCleanDelay);
 80023d8:	4d0b      	ldr	r5, [pc, #44]	; (8002408 <NixieClean+0x44>)
	for (int n = 0; n < 10; n++)
 80023da:	3401      	adds	r4, #1
		HAL_Delay(NixieCleanDelay);
 80023dc:	7828      	ldrb	r0, [r5, #0]
 80023de:	f7fd ff81 	bl	80002e4 <HAL_Delay>
	for (int n = 0; n < 10; n++)
 80023e2:	2c0a      	cmp	r4, #10
 80023e4:	d1f0      	bne.n	80023c8 <NixieClean+0x4>
 80023e6:	3c02      	subs	r4, #2
	}
	for (int n = 8; n > 0; n--)
	{
		display(n, n, n, n, n, n);
 80023e8:	b2e0      	uxtb	r0, r4
 80023ea:	0003      	movs	r3, r0
 80023ec:	0002      	movs	r2, r0
 80023ee:	0001      	movs	r1, r0
 80023f0:	9001      	str	r0, [sp, #4]
 80023f2:	9000      	str	r0, [sp, #0]
 80023f4:	f7ff ffb8 	bl	8002368 <display>
	for (int n = 8; n > 0; n--)
 80023f8:	3c01      	subs	r4, #1
		HAL_Delay(NixieCleanDelay);
 80023fa:	7828      	ldrb	r0, [r5, #0]
 80023fc:	f7fd ff72 	bl	80002e4 <HAL_Delay>
	for (int n = 8; n > 0; n--)
 8002400:	2c00      	cmp	r4, #0
 8002402:	d1f1      	bne.n	80023e8 <NixieClean+0x24>
	}

}
 8002404:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	20000051 	.word	0x20000051

0800240c <MX_SPI2_Init>:
{

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800240c:	22c0      	movs	r2, #192	; 0xc0
  hspi2.Instance = SPI2;
 800240e:	4811      	ldr	r0, [pc, #68]	; (8002454 <MX_SPI2_Init+0x48>)
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <MX_SPI2_Init+0x4c>)
{
 8002412:	b510      	push	{r4, lr}
  hspi2.Instance = SPI2;
 8002414:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002416:	2382      	movs	r3, #130	; 0x82
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002418:	0092      	lsls	r2, r2, #2
 800241a:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800241c:	2202      	movs	r2, #2
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002422:	2300      	movs	r3, #0
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002424:	6102      	str	r2, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002426:	32ff      	adds	r2, #255	; 0xff
 8002428:	32ff      	adds	r2, #255	; 0xff
 800242a:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800242c:	3ac9      	subs	r2, #201	; 0xc9
 800242e:	3aff      	subs	r2, #255	; 0xff
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002430:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002432:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002434:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002436:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002438:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800243a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800243c:	3a31      	subs	r2, #49	; 0x31
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800243e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002440:	3308      	adds	r3, #8
  hspi2.Init.CRCPolynomial = 7;
 8002442:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002444:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002446:	f7fe ffd7 	bl	80013f8 <HAL_SPI_Init>
 800244a:	2800      	cmp	r0, #0
 800244c:	d001      	beq.n	8002452 <MX_SPI2_Init+0x46>
  {
    Error_Handler();
 800244e:	f7ff ff89 	bl	8002364 <Error_Handler>
  }

}
 8002452:	bd10      	pop	{r4, pc}
 8002454:	20000414 	.word	0x20000414
 8002458:	40003800 	.word	0x40003800

0800245c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800245c:	b510      	push	{r4, lr}
 800245e:	0004      	movs	r4, r0
 8002460:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002462:	2214      	movs	r2, #20
 8002464:	2100      	movs	r1, #0
 8002466:	a803      	add	r0, sp, #12
 8002468:	f000 f991 	bl	800278e <memset>
  if(spiHandle->Instance==SPI2)
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <HAL_SPI_MspInit+0x58>)
 800246e:	6822      	ldr	r2, [r4, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d11d      	bne.n	80024b0 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002474:	2080      	movs	r0, #128	; 0x80
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <HAL_SPI_MspInit+0x5c>)
 8002478:	01c0      	lsls	r0, r0, #7
 800247a:	69d9      	ldr	r1, [r3, #28]
 800247c:	4301      	orrs	r1, r0
 800247e:	61d9      	str	r1, [r3, #28]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002480:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002482:	69da      	ldr	r2, [r3, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002484:	02c9      	lsls	r1, r1, #11
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002486:	4002      	ands	r2, r0
 8002488:	9201      	str	r2, [sp, #4]
 800248a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800248c:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248e:	480b      	ldr	r0, [pc, #44]	; (80024bc <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002490:	430a      	orrs	r2, r1
 8002492:	615a      	str	r2, [r3, #20]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	400b      	ands	r3, r1
 8002498:	9302      	str	r3, [sp, #8]
 800249a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800249c:	23a0      	movs	r3, #160	; 0xa0
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024a8:	3301      	adds	r3, #1
 80024aa:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ac:	f7fe f820 	bl	80004f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80024b0:	b008      	add	sp, #32
 80024b2:	bd10      	pop	{r4, pc}
 80024b4:	40003800 	.word	0x40003800
 80024b8:	40021000 	.word	0x40021000
 80024bc:	48000400 	.word	0x48000400

080024c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c0:	2001      	movs	r0, #1
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_MspInit+0x2c>)
{
 80024c4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c6:	6999      	ldr	r1, [r3, #24]
 80024c8:	4301      	orrs	r1, r0
 80024ca:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024cc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ce:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d0:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d2:	4002      	ands	r2, r0
 80024d4:	9200      	str	r2, [sp, #0]
 80024d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d8:	69da      	ldr	r2, [r3, #28]
 80024da:	430a      	orrs	r2, r1
 80024dc:	61da      	str	r2, [r3, #28]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	400b      	ands	r3, r1
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024e6:	b002      	add	sp, #8
 80024e8:	4770      	bx	lr
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	40021000 	.word	0x40021000

080024f0 <NMI_Handler>:
 80024f0:	4770      	bx	lr

080024f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f2:	e7fe      	b.n	80024f2 <HardFault_Handler>

080024f4 <SVC_Handler>:
 80024f4:	4770      	bx	lr

080024f6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f6:	4770      	bx	lr

080024f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024fa:	f7fd fee1 	bl	80002c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024fe:	bd10      	pop	{r4, pc}

08002500 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002500:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

	uint8_t RTC_data[8];

	HAL_I2C_Master_Transmit(&hi2c1, 0x68 << 1, 0, 1, 50);
 8002502:	2632      	movs	r6, #50	; 0x32
 8002504:	4c31      	ldr	r4, [pc, #196]	; (80025cc <EXTI0_1_IRQHandler+0xcc>)
{
 8002506:	b085      	sub	sp, #20
	HAL_I2C_Master_Receive(&hi2c1, 0x68 << 1, RTC_data, 7, 50);
 8002508:	ad02      	add	r5, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, 0x68 << 1, 0, 1, 50);
 800250a:	9600      	str	r6, [sp, #0]
 800250c:	2301      	movs	r3, #1
 800250e:	2200      	movs	r2, #0
 8002510:	21d0      	movs	r1, #208	; 0xd0
 8002512:	0020      	movs	r0, r4
 8002514:	f7fe fa22 	bl	800095c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, 0x68 << 1, RTC_data, 7, 50);
 8002518:	9600      	str	r6, [sp, #0]
 800251a:	2307      	movs	r3, #7
 800251c:	002a      	movs	r2, r5
 800251e:	21d0      	movs	r1, #208	; 0xd0
 8002520:	0020      	movs	r0, r4
 8002522:	f7fe fab1 	bl	8000a88 <HAL_I2C_Master_Receive>
	CurrentTime[5] = RTC_data[0] & 0xF;
 8002526:	782e      	ldrb	r6, [r5, #0]
 8002528:	210f      	movs	r1, #15
 800252a:	0037      	movs	r7, r6
 800252c:	4c28      	ldr	r4, [pc, #160]	; (80025d0 <EXTI0_1_IRQHandler+0xd0>)
 800252e:	400f      	ands	r7, r1
	CurrentTime[4] = RTC_data[0] >> 4;
 8002530:	0936      	lsrs	r6, r6, #4
	CurrentTime[5] = RTC_data[0] & 0xF;
 8002532:	7167      	strb	r7, [r4, #5]
	CurrentTime[4] = RTC_data[0] >> 4;
 8002534:	7126      	strb	r6, [r4, #4]
	CurrentTime[3] = RTC_data[1] & 0xF;
 8002536:	786a      	ldrb	r2, [r5, #1]
 8002538:	0013      	movs	r3, r2
	CurrentTime[2] = RTC_data[1] >> 4;
 800253a:	0912      	lsrs	r2, r2, #4
	CurrentTime[3] = RTC_data[1] & 0xF;
 800253c:	400b      	ands	r3, r1
 800253e:	70e3      	strb	r3, [r4, #3]
	CurrentTime[2] = RTC_data[1] >> 4;
 8002540:	70a2      	strb	r2, [r4, #2]
	CurrentTime[1] = RTC_data[2] & 0xF;
 8002542:	78a8      	ldrb	r0, [r5, #2]
 8002544:	4001      	ands	r1, r0
	CurrentTime[0] = RTC_data[2] >> 4;
 8002546:	0900      	lsrs	r0, r0, #4
	CurrentTime[1] = RTC_data[2] & 0xF;
 8002548:	7061      	strb	r1, [r4, #1]
	CurrentTime[0] = RTC_data[2] >> 4;
 800254a:	7020      	strb	r0, [r4, #0]

	if (CurrentTime[2] == 0 && CurrentTime[3] == 0 && CurrentTime[4] == 0)
 800254c:	2a00      	cmp	r2, #0
 800254e:	d11e      	bne.n	800258e <EXTI0_1_IRQHandler+0x8e>
 8002550:	2b00      	cmp	r3, #0
 8002552:	d11c      	bne.n	800258e <EXTI0_1_IRQHandler+0x8e>
 8002554:	2e00      	cmp	r6, #0
 8002556:	d11a      	bne.n	800258e <EXTI0_1_IRQHandler+0x8e>
	{
		NixieClean(); // Clean Nixies on xx:00:00
 8002558:	f7ff ff34 	bl	80023c4 <NixieClean>

		DotState = !DotState;
	}


	if (CurrentTime[0] == 0 && CurrentTime[1] == 4 && CurrentTime[2] == 0
 800255c:	7823      	ldrb	r3, [r4, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d110      	bne.n	8002584 <EXTI0_1_IRQHandler+0x84>
 8002562:	7863      	ldrb	r3, [r4, #1]
 8002564:	2b04      	cmp	r3, #4
 8002566:	d10d      	bne.n	8002584 <EXTI0_1_IRQHandler+0x84>
 8002568:	78a3      	ldrb	r3, [r4, #2]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10a      	bne.n	8002584 <EXTI0_1_IRQHandler+0x84>
				&& CurrentTime[3] == 1 && CurrentTime[4] == 0
 800256e:	78e3      	ldrb	r3, [r4, #3]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d107      	bne.n	8002584 <EXTI0_1_IRQHandler+0x84>
 8002574:	7922      	ldrb	r2, [r4, #4]
 8002576:	2a00      	cmp	r2, #0
 8002578:	d104      	bne.n	8002584 <EXTI0_1_IRQHandler+0x84>
				&& CurrentTime[5] == 0)
 800257a:	7962      	ldrb	r2, [r4, #5]
 800257c:	2a00      	cmp	r2, #0
 800257e:	d101      	bne.n	8002584 <EXTI0_1_IRQHandler+0x84>
		{
			SyncRequired = 1;// Sync at 04:01:00
 8002580:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <EXTI0_1_IRQHandler+0xd4>)
 8002582:	7013      	strb	r3, [r2, #0]
		}


  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002584:	2001      	movs	r0, #1
 8002586:	f7fe f86b 	bl	8000660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800258a:	b005      	add	sp, #20
 800258c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		display(CurrentTime[0], CurrentTime[1], CurrentTime[2], CurrentTime[3],
 800258e:	9701      	str	r7, [sp, #4]
 8002590:	9600      	str	r6, [sp, #0]
 8002592:	f7ff fee9 	bl	8002368 <display>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, DotState);
 8002596:	4d10      	ldr	r5, [pc, #64]	; (80025d8 <EXTI0_1_IRQHandler+0xd8>)
 8002598:	2101      	movs	r1, #1
 800259a:	782a      	ldrb	r2, [r5, #0]
 800259c:	480f      	ldr	r0, [pc, #60]	; (80025dc <EXTI0_1_IRQHandler+0xdc>)
 800259e:	f7fe f857 	bl	8000650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, DotState);
 80025a2:	782a      	ldrb	r2, [r5, #0]
 80025a4:	2102      	movs	r1, #2
 80025a6:	480d      	ldr	r0, [pc, #52]	; (80025dc <EXTI0_1_IRQHandler+0xdc>)
 80025a8:	f7fe f852 	bl	8000650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, DotState);
 80025ac:	782a      	ldrb	r2, [r5, #0]
 80025ae:	2104      	movs	r1, #4
 80025b0:	480a      	ldr	r0, [pc, #40]	; (80025dc <EXTI0_1_IRQHandler+0xdc>)
 80025b2:	f7fe f84d 	bl	8000650 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, DotState);
 80025b6:	782a      	ldrb	r2, [r5, #0]
 80025b8:	2108      	movs	r1, #8
 80025ba:	4808      	ldr	r0, [pc, #32]	; (80025dc <EXTI0_1_IRQHandler+0xdc>)
 80025bc:	f7fe f848 	bl	8000650 <HAL_GPIO_WritePin>
		DotState = !DotState;
 80025c0:	2301      	movs	r3, #1
 80025c2:	782a      	ldrb	r2, [r5, #0]
 80025c4:	4053      	eors	r3, r2
 80025c6:	702b      	strb	r3, [r5, #0]
 80025c8:	e7c8      	b.n	800255c <EXTI0_1_IRQHandler+0x5c>
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	20000084 	.word	0x20000084
 80025d0:	20000076 	.word	0x20000076
 80025d4:	20000410 	.word	0x20000410
 80025d8:	20000052 	.word	0x20000052
 80025dc:	48000800 	.word	0x48000800

080025e0 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80025e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80025e2:	4802      	ldr	r0, [pc, #8]	; (80025ec <DMA1_Channel4_5_IRQHandler+0xc>)
 80025e4:	f7fd ff3b 	bl	800045e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80025e8:	bd10      	pop	{r4, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	20000478 	.word	0x20000478

080025f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025f2:	4802      	ldr	r0, [pc, #8]	; (80025fc <USART2_IRQHandler+0xc>)
 80025f4:	f7ff f976 	bl	80018e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025f8:	bd10      	pop	{r4, pc}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	20000390 	.word	0x20000390

08002600 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002600:	4770      	bx	lr
	...

08002604 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8002604:	480b      	ldr	r0, [pc, #44]	; (8002634 <MX_USART2_UART_Init+0x30>)
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <MX_USART2_UART_Init+0x34>)
{
 8002608:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800260a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800260c:	23e1      	movs	r3, #225	; 0xe1
 800260e:	025b      	lsls	r3, r3, #9
 8002610:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002612:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002614:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002616:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002618:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800261a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800261c:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800261e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002620:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002622:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002624:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002626:	f7ff fb99 	bl	8001d5c <HAL_UART_Init>
 800262a:	2800      	cmp	r0, #0
 800262c:	d001      	beq.n	8002632 <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 800262e:	f7ff fe99 	bl	8002364 <Error_Handler>
  }

}
 8002632:	bd10      	pop	{r4, pc}
 8002634:	20000390 	.word	0x20000390
 8002638:	40004400 	.word	0x40004400

0800263c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800263c:	b530      	push	{r4, r5, lr}
 800263e:	0005      	movs	r5, r0
 8002640:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002642:	2214      	movs	r2, #20
 8002644:	2100      	movs	r1, #0
 8002646:	a803      	add	r0, sp, #12
 8002648:	f000 f8a1 	bl	800278e <memset>
  if(uartHandle->Instance==USART2)
 800264c:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <HAL_UART_MspInit+0x94>)
 800264e:	682a      	ldr	r2, [r5, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d13b      	bne.n	80026cc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002654:	2280      	movs	r2, #128	; 0x80
 8002656:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <HAL_UART_MspInit+0x98>)
 8002658:	0292      	lsls	r2, r2, #10
 800265a:	69d9      	ldr	r1, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265c:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 800265e:	4311      	orrs	r1, r2
 8002660:	61d9      	str	r1, [r3, #28]
 8002662:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002664:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 8002666:	4011      	ands	r1, r2
 8002668:	9101      	str	r1, [sp, #4]
 800266a:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266c:	6959      	ldr	r1, [r3, #20]
 800266e:	4311      	orrs	r1, r2
 8002670:	6159      	str	r1, [r3, #20]
 8002672:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	401a      	ands	r2, r3
 8002678:	9202      	str	r2, [sp, #8]
 800267a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800267c:	230c      	movs	r3, #12
 800267e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	3b0a      	subs	r3, #10
 8002682:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002684:	3301      	adds	r3, #1
 8002686:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002688:	3b02      	subs	r3, #2
 800268a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268c:	f7fd ff30 	bl	80004f0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8002690:	4c11      	ldr	r4, [pc, #68]	; (80026d8 <HAL_UART_MspInit+0x9c>)
 8002692:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_UART_MspInit+0xa0>)
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002694:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8002696:	6023      	str	r3, [r4, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002698:	2310      	movs	r3, #16
 800269a:	6063      	str	r3, [r4, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800269c:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800269e:	0020      	movs	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026a0:	60a3      	str	r3, [r4, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026a2:	60e2      	str	r2, [r4, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026a4:	6123      	str	r3, [r4, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026a6:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80026a8:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026aa:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80026ac:	f7fd fe82 	bl	80003b4 <HAL_DMA_Init>
 80026b0:	2800      	cmp	r0, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 80026b4:	f7ff fe56 	bl	8002364 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80026b8:	201c      	movs	r0, #28
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80026ba:	66ac      	str	r4, [r5, #104]	; 0x68
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80026bc:	2200      	movs	r2, #0
 80026be:	2102      	movs	r1, #2
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80026c0:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80026c2:	f7fd fe21 	bl	8000308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026c6:	201c      	movs	r0, #28
 80026c8:	f7fd fe4e 	bl	8000368 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026cc:	b009      	add	sp, #36	; 0x24
 80026ce:	bd30      	pop	{r4, r5, pc}
 80026d0:	40004400 	.word	0x40004400
 80026d4:	40021000 	.word	0x40021000
 80026d8:	20000478 	.word	0x20000478
 80026dc:	40020044 	.word	0x40020044

080026e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026e0:	480d      	ldr	r0, [pc, #52]	; (8002718 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026e4:	480d      	ldr	r0, [pc, #52]	; (800271c <LoopForever+0x6>)
  ldr r1, =_edata
 80026e6:	490e      	ldr	r1, [pc, #56]	; (8002720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026e8:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <LoopForever+0xe>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ec:	e002      	b.n	80026f4 <LoopCopyDataInit>

080026ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f2:	3304      	adds	r3, #4

080026f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f8:	d3f9      	bcc.n	80026ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fa:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026fc:	4c0b      	ldr	r4, [pc, #44]	; (800272c <LoopForever+0x16>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002700:	e001      	b.n	8002706 <LoopFillZerobss>

08002702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002704:	3204      	adds	r2, #4

08002706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002708:	d3fb      	bcc.n	8002702 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800270a:	f7ff ff79 	bl	8002600 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800270e:	f000 f811 	bl	8002734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002712:	f7ff fdfd 	bl	8002310 <main>

08002716 <LoopForever>:

LoopForever:
    b LoopForever
 8002716:	e7fe      	b.n	8002716 <LoopForever>
  ldr   r0, =_estack
 8002718:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800271c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002720:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8002724:	080028a8 	.word	0x080028a8
  ldr r2, =_sbss
 8002728:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 800272c:	200004bc 	.word	0x200004bc

08002730 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002730:	e7fe      	b.n	8002730 <ADC1_COMP_IRQHandler>
	...

08002734 <__libc_init_array>:
 8002734:	b570      	push	{r4, r5, r6, lr}
 8002736:	2600      	movs	r6, #0
 8002738:	4d0c      	ldr	r5, [pc, #48]	; (800276c <__libc_init_array+0x38>)
 800273a:	4c0d      	ldr	r4, [pc, #52]	; (8002770 <__libc_init_array+0x3c>)
 800273c:	1b64      	subs	r4, r4, r5
 800273e:	10a4      	asrs	r4, r4, #2
 8002740:	42a6      	cmp	r6, r4
 8002742:	d109      	bne.n	8002758 <__libc_init_array+0x24>
 8002744:	2600      	movs	r6, #0
 8002746:	f000 f82b 	bl	80027a0 <_init>
 800274a:	4d0a      	ldr	r5, [pc, #40]	; (8002774 <__libc_init_array+0x40>)
 800274c:	4c0a      	ldr	r4, [pc, #40]	; (8002778 <__libc_init_array+0x44>)
 800274e:	1b64      	subs	r4, r4, r5
 8002750:	10a4      	asrs	r4, r4, #2
 8002752:	42a6      	cmp	r6, r4
 8002754:	d105      	bne.n	8002762 <__libc_init_array+0x2e>
 8002756:	bd70      	pop	{r4, r5, r6, pc}
 8002758:	00b3      	lsls	r3, r6, #2
 800275a:	58eb      	ldr	r3, [r5, r3]
 800275c:	4798      	blx	r3
 800275e:	3601      	adds	r6, #1
 8002760:	e7ee      	b.n	8002740 <__libc_init_array+0xc>
 8002762:	00b3      	lsls	r3, r6, #2
 8002764:	58eb      	ldr	r3, [r5, r3]
 8002766:	4798      	blx	r3
 8002768:	3601      	adds	r6, #1
 800276a:	e7f2      	b.n	8002752 <__libc_init_array+0x1e>
 800276c:	080028a0 	.word	0x080028a0
 8002770:	080028a0 	.word	0x080028a0
 8002774:	080028a0 	.word	0x080028a0
 8002778:	080028a4 	.word	0x080028a4

0800277c <memcpy>:
 800277c:	2300      	movs	r3, #0
 800277e:	b510      	push	{r4, lr}
 8002780:	429a      	cmp	r2, r3
 8002782:	d100      	bne.n	8002786 <memcpy+0xa>
 8002784:	bd10      	pop	{r4, pc}
 8002786:	5ccc      	ldrb	r4, [r1, r3]
 8002788:	54c4      	strb	r4, [r0, r3]
 800278a:	3301      	adds	r3, #1
 800278c:	e7f8      	b.n	8002780 <memcpy+0x4>

0800278e <memset>:
 800278e:	0003      	movs	r3, r0
 8002790:	1882      	adds	r2, r0, r2
 8002792:	4293      	cmp	r3, r2
 8002794:	d100      	bne.n	8002798 <memset+0xa>
 8002796:	4770      	bx	lr
 8002798:	7019      	strb	r1, [r3, #0]
 800279a:	3301      	adds	r3, #1
 800279c:	e7f9      	b.n	8002792 <memset+0x4>
	...

080027a0 <_init>:
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a6:	bc08      	pop	{r3}
 80027a8:	469e      	mov	lr, r3
 80027aa:	4770      	bx	lr

080027ac <_fini>:
 80027ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b2:	bc08      	pop	{r3}
 80027b4:	469e      	mov	lr, r3
 80027b6:	4770      	bx	lr
